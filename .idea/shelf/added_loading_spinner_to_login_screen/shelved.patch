Index: app/src/main/java/com/example/doug/checklistpresentlayer/Checklist.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.doug.checklistpresentlayer\r\nimport com.google.gson.annotations.SerializedName\r\nimport org.joda.time.format.DateTimeFormat\r\nimport net.danlew.android.joda.DateUtils\r\nimport org.joda.time.DateTime\r\nimport org.joda.time.Duration\r\nimport org.joda.time.LocalDate\r\nimport org.joda.time.LocalDateTime\r\nimport kotlin.concurrent.thread\r\nimport android.widget.ImageButton\r\nimport org.joda.time.format.DateTimeFormat\r\n\r\n\r\nclass Checklist( var name: String, var cListID : Int? ) : ListClass(cListID, name){\r\n    private var dbAccess = Database()\r\n    var tasks =  mutableListOf<Task>()\r\n    var users = mutableListOf<User>()\r\n    var changes = mutableListOf<Change>()\r\n\r\n     /****************************************************************\r\n     *  Purpose: Logs change, the user who changed it, the type of\r\n     *      action that was taken, and what the value was changed to\r\n     ***************************************************************/\r\n    fun logChange(taskID: Int, taskName: String, changedBy: User, changeType: kAction, changedTo: String) {\r\n        val change = Change(listID, changedBy.UserID!!, taskID, taskName, changedBy.Username, changeType, changedTo)\r\n        changes.add(change)\r\n    }\r\n\r\n    /****************************************************************\r\n     *  Purpose: Overloaded function of logChange that does not\r\n     *      include a \"changed to\" value.\r\n     ***************************************************************/\r\n    fun logChange(taskID: Int, taskName: String, changedBy: User, changeType: kAction) {\r\n        val change = Change(listID, changedBy.UserID!!, taskID, taskName, changedBy.Username, changeType, null)\r\n        changes.add(change)\r\n    }\r\n\r\n    /****************************************************************\r\n     *  Purpose: Overloaded function of create task that includes all\r\n     *      previous information and also includes a deadline\r\n     ***************************************************************/\r\n    fun createTask(name: String, deadline: String?, createdBy: User, taskID: Int?, checklistID: Int?) {\r\n        val task = Task(name, deadline, taskID, checklistID)\r\n        task.TaskID = dbAccess.PostTask(task)\r\n        tasks.add(task)\r\n        //logChange(task.TaskID!!, task.name, createdBy, kAction.CREATE_TASK)\r\n    }\r\n\r\n    /****************************************************************\r\n     *  Purpose: Marks a task as completed and does NOT remove from\r\n     *      the list of tasks. This is so it can be a recurring task\r\n     ***************************************************************/\r\n    fun completeTask(arrayIndex: Int, completedBy: User) {\r\n        if (arrayIndex >= 0 && arrayIndex < tasks.size) {\r\n            logChange(tasks[arrayIndex].TaskID!!, tasks[arrayIndex].name, completedBy, kAction.COMPLETE_TASK)\r\n            tasks[arrayIndex].compdatetime = LocalDate.now().toString()\r\n        }\r\n    }\r\n\r\n    /****************************************************************\r\n     *  Purpose: Deletes a task from the list of tasks. Deletes\r\n     *      through an index in the table and logs who deleted what\r\n     ***************************************************************/\r\n    fun deleteTask(arrayIndex : Int, deletedBy: User) {\r\n        if (arrayIndex >= 0 && arrayIndex < tasks.size) {\r\n            //logChange(tasks[arrayIndex].TaskID!!, tasks[arrayIndex].name, deletedBy, kAction.DELETE_TASK)\r\n            dbAccess.DeleteTask(tasks[arrayIndex]) //remove the task from the database\r\n            tasks.removeAt(arrayIndex) //remove the task from the app\r\n        }\r\n    }\r\n\r\n    /****************************************************************\r\n     *  Purpose: Changes the name of a task to a user-specified new\r\n     *      value. Shows which user modified it for logs.\r\n     ***************************************************************/\r\n    fun changeTaskName(arrayIndex: Int, modifiedBy: User, name: String) {\r\n\r\n        if (arrayIndex >= 0 && arrayIndex < tasks.size) {\r\n            logChange(tasks[arrayIndex].TaskID!!, tasks[arrayIndex].name, modifiedBy, kAction.CHANGE_TASK_NAME, name)\r\n            //tasks[arrayIndex].putTask(uID)\r\n            tasks[arrayIndex].name = name\r\n        }\r\n    }\r\n\r\n    /****************************************************************\r\n     *  Purpose: Changes the deadline of a task to a new value.\r\n     *      Shows which user modified it for logs.\r\n     ***************************************************************/\r\n    fun changeTaskDeadline(arrayIndex: Int, modifiedBy: User, deadline: String) {\r\n        if (arrayIndex >= 0 && arrayIndex < tasks.size) {\r\n            logChange(tasks[arrayIndex].TaskID!!, tasks[arrayIndex].name, modifiedBy, kAction.CHANGE_TASK_DEADLINE, deadline)\r\n            tasks[arrayIndex].Deadline = deadline\r\n        }\r\n    }\r\n\r\n    /****************************************************************\r\n     *  Purpose: Completely removes a deadline associated with a task\r\n     *      as long as there is a deadline associated with it.\r\n     ***************************************************************/\r\n    fun removeDeadline(arrayIndex: Int, modifiedBy: User) {\r\n        if (arrayIndex >= 0 && arrayIndex < tasks.size) {\r\n            logChange(tasks[arrayIndex].TaskID!!, tasks[arrayIndex].name, modifiedBy, kAction.REMOVE_TASK_DEADLINE)\r\n            tasks[arrayIndex].Deadline = \"\"\r\n        }\r\n    }\r\n\r\n    fun addUser(user: User){\r\n        users.add(user)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/doug/checklistpresentlayer/Checklist.kt	(revision 13d4daf765c6ca17aea3e6f72bde761a7f8a7d51)
+++ app/src/main/java/com/example/doug/checklistpresentlayer/Checklist.kt	(date 1555616737949)
@@ -8,7 +8,6 @@
 import org.joda.time.LocalDateTime
 import kotlin.concurrent.thread
 import android.widget.ImageButton
-import org.joda.time.format.DateTimeFormat
 
 
 class Checklist( var name: String, var cListID : Int? ) : ListClass(cListID, name){

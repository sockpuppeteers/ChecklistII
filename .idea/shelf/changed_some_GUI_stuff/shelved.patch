Index: app/src/main/java/com/example/doug/checklistpresentlayer/Checklist.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.doug.checklistpresentlayer\nimport com.google.gson.annotations.SerializedName\nimport org.joda.time.format.DateTimeFormat\nimport net.danlew.android.joda.DateUtils\nimport org.joda.time.DateTime\nimport org.joda.time.Duration\nimport org.joda.time.LocalDate\nimport org.joda.time.LocalDateTime\nimport kotlin.concurrent.thread\nimport android.widget.ImageButton\nimport org.joda.time.format.DateTimeFormat\n\n\nclass Checklist( var name: String, var cListID : Int? ) : ListClass(cListID, name){\n    private var dbAccess = Database()\n    var tasks =  mutableListOf<Task>()\n    var users = mutableListOf<User>()\n    var changes = mutableListOf<Change>()\n\n     /****************************************************************\n     *  Purpose: Logs change, the user who changed it, the type of\n     *      action that was taken, and what the value was changed to\n     ***************************************************************/\n    fun logChange(taskID: Int, taskName: String, changedBy: User, changeType: kAction, changedTo: String) {\n        val change = Change(listID, changedBy.UserID!!, taskID, taskName, changedBy.Username, changeType, changedTo)\n        changes.add(change)\n    }\n\n    /****************************************************************\n     *  Purpose: Overloaded function of logChange that does not\n     *      include a \"changed to\" value.\n     ***************************************************************/\n    fun logChange(taskID: Int, taskName: String, changedBy: User, changeType: kAction) {\n        val change = Change(listID, changedBy.UserID!!, taskID, taskName, changedBy.Username, changeType, null)\n        changes.add(change)\n    }\n\n    /****************************************************************\n     *  Purpose: Overloaded function of create task that includes all\n     *      previous information and also includes a deadline\n     ***************************************************************/\n    fun createTask(name: String, deadline: String?, createdBy: User, taskID: Int?, checklistID: Int?) {\n        val task = Task(name, deadline, taskID, checklistID)\n        task.TaskID = dbAccess.PostTask(task)\n        tasks.add(task)\n        //logChange(task.TaskID!!, task.name, createdBy, kAction.CREATE_TASK)\n    }\n\n    /****************************************************************\n     *  Purpose: Marks a task as completed and does NOT remove from\n     *      the list of tasks. This is so it can be a recurring task\n     ***************************************************************/\n    fun completeTask(arrayIndex: Int, completedBy: User) {\n        if (arrayIndex >= 0 && arrayIndex < tasks.size) {\n            logChange(tasks[arrayIndex].TaskID!!, tasks[arrayIndex].name, completedBy, kAction.COMPLETE_TASK)\n            tasks[arrayIndex].compdatetime = LocalDate.now().toString()\n        }\n    }\n\n    /****************************************************************\n     *  Purpose: Deletes a task from the list of tasks. Deletes\n     *      through an index in the table and logs who deleted what\n     ***************************************************************/\n    fun deleteTask(arrayIndex : Int, deletedBy: User) {\n        if (arrayIndex >= 0 && arrayIndex < tasks.size) {\n            //logChange(tasks[arrayIndex].TaskID!!, tasks[arrayIndex].name, deletedBy, kAction.DELETE_TASK)\n            dbAccess.DeleteTask(tasks[arrayIndex]) //remove the task from the database\n            tasks.removeAt(arrayIndex) //remove the task from the app\n        }\n    }\n\n    /****************************************************************\n     *  Purpose: Changes the name of a task to a user-specified new\n     *      value. Shows which user modified it for logs.\n     ***************************************************************/\n    fun changeTaskName(arrayIndex: Int, modifiedBy: User, name: String) {\n\n        if (arrayIndex >= 0 && arrayIndex < tasks.size) {\n            logChange(tasks[arrayIndex].TaskID!!, tasks[arrayIndex].name, modifiedBy, kAction.CHANGE_TASK_NAME, name)\n            //tasks[arrayIndex].putTask(uID)\n            tasks[arrayIndex].name = name\n        }\n    }\n\n    /****************************************************************\n     *  Purpose: Changes the deadline of a task to a new value.\n     *      Shows which user modified it for logs.\n     ***************************************************************/\n    fun changeTaskDeadline(arrayIndex: Int, modifiedBy: User, deadline: String) {\n        if (arrayIndex >= 0 && arrayIndex < tasks.size) {\n            logChange(tasks[arrayIndex].TaskID!!, tasks[arrayIndex].name, modifiedBy, kAction.CHANGE_TASK_DEADLINE, deadline)\n            tasks[arrayIndex].Deadline = deadline\n        }\n    }\n\n    /****************************************************************\n     *  Purpose: Completely removes a deadline associated with a task\n     *      as long as there is a deadline associated with it.\n     ***************************************************************/\n    fun removeDeadline(arrayIndex: Int, modifiedBy: User) {\n        if (arrayIndex >= 0 && arrayIndex < tasks.size) {\n            logChange(tasks[arrayIndex].TaskID!!, tasks[arrayIndex].name, modifiedBy, kAction.REMOVE_TASK_DEADLINE)\n            tasks[arrayIndex].Deadline = \"\"\n        }\n    }\n\n    fun addUser(user: User){\n        users.add(user)\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/doug/checklistpresentlayer/Checklist.kt	(revision 13d4daf765c6ca17aea3e6f72bde761a7f8a7d51)
+++ app/src/main/java/com/example/doug/checklistpresentlayer/Checklist.kt	(date 1555447978178)
@@ -8,7 +8,6 @@
 import org.joda.time.LocalDateTime
 import kotlin.concurrent.thread
 import android.widget.ImageButton
-import org.joda.time.format.DateTimeFormat
 
 
 class Checklist( var name: String, var cListID : Int? ) : ListClass(cListID, name){

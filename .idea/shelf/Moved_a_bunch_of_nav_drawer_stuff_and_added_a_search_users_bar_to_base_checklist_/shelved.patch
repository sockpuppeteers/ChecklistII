Index: app/src/main/java/com/example/doug/checklistpresentlayer/BaseChecklist.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.doug.checklistpresentlayer\r\n\r\nimport android.app.SearchManager\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.pm.ActivityInfo\r\nimport android.graphics.Color\r\nimport android.os.Bundle\r\nimport android.support.constraint.ConstraintLayout\r\nimport android.support.design.widget.NavigationView\r\nimport android.support.v4.content.ContextCompat.startActivity\r\nimport android.support.v4.view.GravityCompat\r\nimport android.support.v4.widget.DrawerLayout\r\nimport android.support.v7.app.ActionBar\r\nimport android.support.v7.app.AppCompatActivity\r\nimport android.support.v7.widget.Toolbar\r\nimport android.view.*\r\nimport android.widget.*\r\nimport com.google.gson.Gson\r\nimport kotlinx.android.synthetic.main.activity_base_checklist.*\r\nimport kotlinx.android.synthetic.main.history_popup.view.*\r\nimport kotlinx.android.synthetic.main.popup_layout.view.*\r\nimport kotlinx.android.synthetic.main.task_functions_layout.view.*\r\nimport kotlinx.android.synthetic.main.task_settings_deadline_popup.view.*\r\nimport kotlinx.android.synthetic.main.task_settings_name_change_popup.view.*\r\nimport kotlinx.android.synthetic.main.task_settings_popup.view.*\r\nimport kotlinx.android.synthetic.main.task_settings_recursion_popup.view.*\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.launch\r\nimport java.io.File\r\nimport java.io.FileInputStream\r\nimport java.io.FileOutputStream\r\nimport net.danlew.android.joda.DateUtils\r\n\r\nimport org.joda.time.DateTime\r\nimport org.joda.time.Duration\r\nimport org.joda.time.LocalDate\r\nimport kotlin.concurrent.thread\r\nimport android.widget.ImageButton\r\nimport com.google.gson.reflect.TypeToken\r\nimport org.jetbrains.anko.db.NULL\r\nimport org.joda.time.format.DateTimeFormat\r\nimport java.text.SimpleDateFormat\r\nimport java.time.format.DateTimeFormatter\r\n\r\n/********************************************\r\n *TODO: Move listener assignments to functions\r\n ********************************************/\r\nclass BaseChecklist : AppCompatActivity(){\r\n\r\n    var currentChecklist = Checklist(\"Your Checklist\", 0 )\r\n    var taskFlag = true\r\n    //Flag to see if any popups are present\r\n    var popupPresent = false\r\n\r\n    var currentUser = User(1)\r\n    var currentTask: TaskBox? = null\r\n\r\n    private lateinit var userLayout: DrawerLayout\r\n    private lateinit var navigationView: NavigationView\r\n    private lateinit var menu: Menu\r\n    private lateinit var subMenu: SubMenu\r\n    //private val mUserList = ArrayList<UserPage>()\r\n\r\n    //Intialize things here\r\n    init {\r\n    }\r\n\r\n    private fun createSettingsPopup() {\r\n        if (!popupPresent ) {\r\n            popupPresent = true\r\n\r\n            val mainView = findViewById<ScrollView>(R.id.TaskScrollView)\r\n\r\n            val popupSettingsWindow = PopupWindow(this)\r\n\r\n            val taskSettingsLayoutView =\r\n                layoutInflater.inflate(R.layout.task_settings_popup, null)\r\n\r\n            var taskCount = 0\r\n            var found = false\r\n            //Checks all current gui elements to see if they are checked\r\n            while (taskCount < currentChecklist.tasks.count() && !found) {\r\n                if(currentChecklist.tasks[taskCount].TaskID == currentTask?.taskID)\r\n                {\r\n                    found = true\r\n\r\n                }\r\n                else\r\n                {\r\n                    taskCount++\r\n                }\r\n            }\r\n\r\n            popupSettingsWindow.contentView = taskSettingsLayoutView\r\n\r\n            /**************\r\n             *   Deadline Button Displays Deadline popup\r\n             ***************/\r\n            taskSettingsLayoutView.DeadlineButton.setOnClickListener {\r\n\r\n                popupSettingsWindow.dismiss()\r\n                var curDeadline = LocalDate.now().toString()\r\n                val popupSettingsDeadlineWindow = PopupWindow(this)\r\n\r\n                val taskSettingsDeadlineLayoutView =\r\n                    layoutInflater.inflate(R.layout.task_settings_deadline_popup, null)\r\n\r\n                var tempString = \"\"\r\n\r\n                popupSettingsDeadlineWindow.contentView = taskSettingsDeadlineLayoutView\r\n\r\n                if(currentChecklist.tasks[taskCount].Deadline != null) {\r\n                    tempString =\r\n                        getString(R.string.CURRENT_DEADLINE_TEXT) + \" \" + currentChecklist.tasks[taskCount].Deadline.toString()\r\n\r\n                    taskSettingsDeadlineLayoutView.CurrentDeadlineTextView.text = tempString\r\n                }\r\n                else {\r\n                    taskSettingsDeadlineLayoutView.CurrentDeadlineTextView.text = getString(R.string.NO_DEADLINE_TEXT)\r\n                }\r\n\r\n                taskSettingsDeadlineLayoutView.ClearDeadlineButton.setOnClickListener {\r\n                    taskSettingsDeadlineLayoutView.CurrentDeadlineTextView.text = getString(R.string.NO_DEADLINE_TEXT)\r\n\r\n                    currentChecklist.removeDeadline(taskCount, currentUser)\r\n                    curDeadline = LocalDate.now().minusDays(1).toString()\r\n                }\r\n\r\n                taskSettingsDeadlineLayoutView.DeadlineCalendarView.setOnDateChangeListener{_, year, month, day ->\r\n                    tempString =\r\n                        getString(R.string.CURRENT_DEADLINE_TEXT) + \" \" + year + \"-\" + month + \"-\" + day\r\n\r\n                    taskSettingsDeadlineLayoutView.CurrentDeadlineTextView.text = tempString\r\n\r\n                    curDeadline = \"$year-$month-$day\"\r\n                }\r\n\r\n                taskSettingsDeadlineLayoutView.closeDeadlineButton.setOnClickListener{\r\n\r\n                    popupSettingsDeadlineWindow.dismiss()\r\n\r\n                    popupPresent = false\r\n                }\r\n\r\n                popupSettingsDeadlineWindow.setOnDismissListener {\r\n                    if (curDeadline != LocalDate.now().minusDays(1).toString())\r\n                        currentChecklist.changeTaskDeadline(taskCount, currentUser, curDeadline)\r\n                    popupPresent = false\r\n                }\r\n\r\n                popupSettingsDeadlineWindow.isFocusable = true\r\n\r\n                popupSettingsDeadlineWindow.showAtLocation(mainView, Gravity.CENTER, 0, 0)\r\n            }\r\n\r\n            /**************\r\n             *   Recursion Button Displays Task Recursion popup\r\n             ***************/\r\n            taskSettingsLayoutView.RecursionButton.setOnClickListener {\r\n\r\n                popupSettingsWindow.dismiss()\r\n\r\n                val popupSettingsRecurringWindow = PopupWindow(this)\r\n\r\n                val taskSettingsRecurringLayoutView =\r\n                    layoutInflater.inflate(R.layout.task_settings_recursion_popup, null)\r\n\r\n                taskSettingsRecurringLayoutView.RecursionSwitch.setOnClickListener {\r\n                    currentTask?.setRecurringIfNotComplete(taskSettingsRecurringLayoutView.RecursionSwitch.isChecked)\r\n                }\r\n\r\n                taskSettingsRecurringLayoutView.CurrentDaysTextView.text = calcTempStringDays(taskCount)\r\n\r\n                taskSettingsRecurringLayoutView.CurrentTimeTextView.text = calcTempStringTime(taskCount)\r\n\r\n                popupSettingsRecurringWindow.contentView = taskSettingsRecurringLayoutView\r\n\r\n                popupSettingsRecurringWindow.setOnDismissListener {\r\n\r\n                    currentTask?.setRecurringIfNotComplete(taskSettingsRecurringLayoutView.RecursionSwitch.isChecked)\r\n\r\n                    popupPresent = false\r\n\r\n                }\r\n                taskSettingsRecurringLayoutView.RecursionSwitch.setOnClickListener {\r\n                    currentTask?.setRecurringIfNotComplete(taskSettingsRecurringLayoutView.RecursionSwitch.isChecked)\r\n                    currentChecklist.setTaskRecursion(taskCount, currentUser,\r\n                        taskSettingsRecurringLayoutView.RecursionSwitch.isChecked)\r\n                }\r\n\r\n                taskSettingsRecurringLayoutView.CloseRecurringButton.setOnClickListener{\r\n\r\n                    currentTask?.setRecurringIfNotComplete(taskSettingsRecurringLayoutView.RecursionSwitch.isChecked)\r\n\r\n                    popupSettingsRecurringWindow.dismiss()\r\n\r\n                    popupPresent = false\r\n                }\r\n\r\n                //********************************************************************\r\n                //Format for recurring date string is Day-Day-Day-.... ex. Mon-Tue-Fri\r\n                //\r\n                //Format for recurring time string is hour:minute AM\\PM\r\n                //********************************************************************\r\n                taskSettingsRecurringLayoutView.SaveRecurringSettingsButton.setOnClickListener {\r\n                    var dateString = \"\"\r\n\r\n                    if(taskSettingsRecurringLayoutView.SundaySwitch.isChecked)\r\n                        dateString += \"Sun-\"\r\n\r\n                    if(taskSettingsRecurringLayoutView.MondaySwitch.isChecked)\r\n                        dateString += \"Mon-\"\r\n\r\n                    if(taskSettingsRecurringLayoutView.TuesdaySwitch.isChecked)\r\n                        dateString += \"Tue-\"\r\n\r\n                    if(taskSettingsRecurringLayoutView.WednesdaySwitch.isChecked)\r\n                        dateString += \"Wed-\"\r\n\r\n                    if(taskSettingsRecurringLayoutView.ThursdaySwitch.isChecked)\r\n                        dateString += \"Thu-\"\r\n\r\n                    if(taskSettingsRecurringLayoutView.FridaySwitch.isChecked)\r\n                        dateString += \"Fri-\"\r\n\r\n                    if(taskSettingsRecurringLayoutView.SaturdaySwitch.isChecked)\r\n                        dateString += \"Sat-\"\r\n\r\n                    if(dateString != currentChecklist.tasks[taskCount].recurringDays)\r\n                        currentChecklist.updateTaskRecurringDays(taskCount, currentUser, dateString)\r\n\r\n                    var timeString =\r\n                        taskSettingsRecurringLayoutView.HourSpinner.selectedItem.toString() +\r\n                                \":\" + taskSettingsRecurringLayoutView.MinuteSpinner.selectedItem.toString() +\r\n                                \" \" + taskSettingsRecurringLayoutView.AmPmSpinner.selectedItem.toString()\r\n\r\n                    if(timeString != currentChecklist.tasks[taskCount].recurringTime)\r\n                        currentChecklist.updateTaskRecurringTime(taskCount, currentUser, timeString)\r\n\r\n                    taskSettingsRecurringLayoutView.CurrentDaysTextView.text = calcTempStringDays(taskCount)\r\n\r\n                    taskSettingsRecurringLayoutView.CurrentTimeTextView.text = calcTempStringTime(taskCount)\r\n                }\r\n\r\n                taskSettingsRecurringLayoutView.RecursionSwitch.isChecked =\r\n                    currentTask?.checkReccurring() != null && currentTask?.checkReccurring() == true\r\n\r\n\r\n                popupSettingsRecurringWindow.setOnDismissListener {\r\n                    popupPresent = false\r\n                }\r\n\r\n                popupSettingsRecurringWindow.isFocusable = true\r\n\r\n                popupSettingsRecurringWindow.showAtLocation(mainView, Gravity.CENTER, 0, 0)\r\n            }\r\n\r\n            taskSettingsLayoutView.ChangeNameSettingsButton.setOnClickListener {\r\n\r\n                popupSettingsWindow.dismiss()\r\n\r\n                val popupSettingsChangeNameWindow = PopupWindow(this)\r\n\r\n                val taskSettingsChangeNameLayoutView =\r\n                    layoutInflater.inflate(R.layout.task_settings_name_change_popup, null)\r\n\r\n                popupSettingsChangeNameWindow.contentView = taskSettingsChangeNameLayoutView\r\n\r\n                taskSettingsChangeNameLayoutView.ChangeNameButton.setOnClickListener {\r\n\r\n                    val newName = taskSettingsChangeNameLayoutView.NewNameText.text.toString()\r\n\r\n                    currentTask?.ChangeName(newName)\r\n\r\n                    currentChecklist.changeTaskName(taskCount, currentUser, newName)\r\n\r\n                    popupPresent = false\r\n\r\n                    popupSettingsChangeNameWindow.dismiss()\r\n                }\r\n\r\n                popupSettingsChangeNameWindow.setOnDismissListener {\r\n                    popupPresent = false\r\n                }\r\n\r\n                taskSettingsChangeNameLayoutView.ChangeNameCancelButton.setOnClickListener {\r\n                    popupPresent = false\r\n\r\n                    popupSettingsChangeNameWindow.dismiss()\r\n                }\r\n\r\n                popupSettingsChangeNameWindow.isFocusable = true\r\n\r\n                popupSettingsChangeNameWindow.showAtLocation(mainView, Gravity.CENTER, 0, 0)\r\n            }\r\n\r\n            taskSettingsLayoutView.CloseButton.setOnClickListener {\r\n                popupSettingsWindow.dismiss()\r\n                popupPresent = false\r\n            }\r\n\r\n            popupSettingsWindow.setOnDismissListener {\r\n                popupPresent = false\r\n            }\r\n\r\n            taskSettingsLayoutView.taskNameView.text = currentTask?.getTaskText()\r\n\r\n            popupSettingsWindow.isFocusable = true\r\n\r\n            popupSettingsWindow.showAtLocation(mainView, Gravity.CENTER, 0, 0)\r\n        }\r\n    }\r\n\r\n    private fun calcTempStringDays(index: Int) = when(currentChecklist.tasks[index].recurringDays != null) {\r\n        true -> getString(R.string.CURRENT_RECURRING_DAYS_TEXT) +\r\n                \" \" + currentChecklist.tasks[index].recurringDays\r\n        false -> \"No current recurring days\"\r\n    }\r\n\r\n    private fun calcTempStringTime(index: Int) = when(currentChecklist.tasks[index].recurringTime != null){\r\n        true -> getString(R.string.CURRENT_RECURRING_TIME_TEXT) +\r\n                \" \" + currentChecklist.tasks[index].recurringTime\r\n        false -> \"No current recurring time\"\r\n    }\r\n\r\n    fun createNewTask(TaskText: String, IsReaccuring: Boolean, taskID: Int?) {\r\n        var new_task_box = TaskBox(\r\n            this,\r\n            TaskText\r\n        )\r\n\r\n        if(IsReaccuring)\r\n            new_task_box.setRecurringIfNotComplete(IsReaccuring)\r\n\r\n        val mainView = findViewById<ScrollView>(R.id.TaskScrollView)\r\n\r\n        //Adds the task to the checklist\r\n        currentChecklist.createTask(TaskText, null, currentUser, null, currentChecklist.listID!!)\r\n\r\n        //rebuild the local file with the updated checklist\r\n        GlobalScope.launch {\r\n            deleteListDataFile()\r\n            createListFile(currentChecklist)\r\n        }\r\n\r\n        val popupFunctionWindow = PopupWindow(this)\r\n\r\n        val taskFunctionLayoutView =\r\n            layoutInflater.inflate(R.layout.task_functions_layout, null)\r\n\r\n        taskFunctionLayoutView.FunctionCloseButton.setOnClickListener {\r\n            popupFunctionWindow.dismiss()\r\n\r\n            popupPresent = false\r\n        }\r\n\r\n        taskFunctionLayoutView.FunctionSettingsButton.setOnClickListener {\r\n            popupFunctionWindow.dismiss()\r\n\r\n            popupPresent = false\r\n\r\n            createSettingsPopup()\r\n        }\r\n\r\n        //Sets the delete button to remove the task\r\n        taskFunctionLayoutView.FunctionDeleteButton.setOnClickListener {\r\n            for(i in TaskLayout.childCount downTo 0 step 1)\r\n            {\r\n                val tempChild = TaskLayout.getChildAt(i)\r\n                if(tempChild is TaskBox)\r\n                {\r\n                    if(tempChild == currentTask)\r\n                    {\r\n                        TaskLayout.removeView(TaskLayout.getChildAt(i))\r\n                        //remove the task from the list, and delete it from the database\r\n                        currentChecklist.deleteTask(i, currentUser)\r\n\r\n                        //update the local file\r\n                        GlobalScope.launch {\r\n                            deleteListDataFile()\r\n                            createListFile(currentChecklist)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            popupFunctionWindow.dismiss()\r\n\r\n            popupPresent = false\r\n        }\r\n\r\n        popupFunctionWindow.contentView = taskFunctionLayoutView\r\n\r\n        popupFunctionWindow.setOnDismissListener {\r\n            PopupWindow.OnDismissListener {\r\n                popupPresent = false\r\n            }\r\n        }\r\n\r\n        //Sets the on lick listener for the new task gui element\r\n        new_task_box.setOnClickListener{\r\n\r\n            if(!popupPresent && taskFlag) {\r\n\r\n                popupPresent = true\r\n\r\n                popupFunctionWindow.isFocusable()\r\n\r\n                popupFunctionWindow.showAtLocation(mainView, Gravity.CENTER, 0, 0)\r\n\r\n                for(i in TaskLayout.childCount downTo 0 step 1)\r\n                {\r\n                    val tempChild = TaskLayout.getChildAt(i)\r\n                    if(tempChild is TaskBox)\r\n                    {\r\n                        if(tempChild == new_task_box) {\r\n                            currentTask = tempChild\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        val taskLayout = findViewById<LinearLayout>(R.id.TaskLayout)\r\n\r\n        taskLayout.addView(new_task_box)\r\n    }\r\n\r\n    fun addTask(task: Task) {\r\n        var new_task_box = TaskBox(\r\n            this,\r\n            task.name\r\n        )\r\n\r\n        new_task_box.taskID = task.TaskID\r\n\r\n        if(task.isRecurring == true)\r\n            new_task_box.setRecurringIfNotComplete(true)\r\n        if (task.compdatetime != null)\r\n            new_task_box.completeTask()\r\n\r\n        val mainView = findViewById<ScrollView>(R.id.TaskScrollView)\r\n\r\n        //Adds the task to the checklist\r\n        currentChecklist.tasks.add(task)\r\n\r\n        val popupFunctionWindow = PopupWindow(this)\r\n\r\n        val taskFunctionLayoutView =\r\n            layoutInflater.inflate(R.layout.task_functions_layout, null)\r\n\r\n        taskFunctionLayoutView.FunctionCloseButton.setOnClickListener {\r\n            popupFunctionWindow.dismiss()\r\n\r\n            popupPresent = false\r\n        }\r\n\r\n        taskFunctionLayoutView.FunctionSettingsButton.setOnClickListener {\r\n            popupFunctionWindow.dismiss()\r\n\r\n            popupPresent = false\r\n\r\n            createSettingsPopup()\r\n        }\r\n\r\n        //Sets the delete button to remove the task\r\n        taskFunctionLayoutView.FunctionDeleteButton.setOnClickListener {\r\n            for(i in TaskLayout.childCount downTo 0 step 1)\r\n            {\r\n                val tempChild = TaskLayout.getChildAt(i)\r\n                if(tempChild is TaskBox)\r\n                {\r\n                    if(tempChild == currentTask)\r\n                    {\r\n                        TaskLayout.removeView(TaskLayout.getChildAt(i))\r\n                        currentChecklist.deleteTask(i, currentUser)\r\n                    }\r\n                }\r\n            }\r\n\r\n            popupFunctionWindow.dismiss()\r\n\r\n            popupPresent = false\r\n        }\r\n\r\n        popupFunctionWindow.contentView = taskFunctionLayoutView\r\n\r\n        popupFunctionWindow.setOnDismissListener {\r\n            PopupWindow.OnDismissListener {\r\n                popupPresent = false\r\n            }\r\n        }\r\n\r\n        //Sets the on lick listener for the new task gui element\r\n        new_task_box.setOnClickListener{\r\n\r\n            if(!popupPresent) {\r\n\r\n                popupPresent = true\r\n\r\n                popupFunctionWindow.isFocusable()\r\n\r\n                popupFunctionWindow.showAtLocation(mainView, Gravity.CENTER, 0, 0)\r\n\r\n                for(i in TaskLayout.childCount downTo 0 step 1)\r\n                {\r\n                    val tempChild = TaskLayout.getChildAt(i)\r\n                    if(tempChild is TaskBox)\r\n                    {\r\n                        if(tempChild == new_task_box) {\r\n                            currentTask = tempChild\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        val taskLayout = findViewById<LinearLayout>(R.id.TaskLayout)\r\n\r\n        taskLayout.addView(new_task_box)\r\n    }\r\n\r\n    fun addTaskFromList(task: Task) {\r\n        var new_task_box = TaskBox(\r\n            this,\r\n            task.name\r\n        )\r\n\r\n        if(task.isRecurring == true)\r\n            new_task_box.setRecurringIfNotComplete(true)\r\n        if (task.compdatetime != null)\r\n            new_task_box.completeTask()\r\n\r\n        val mainView = findViewById<ScrollView>(R.id.TaskScrollView)\r\n\r\n        val popupFunctionWindow = PopupWindow(this)\r\n\r\n        val taskFunctionLayoutView =\r\n            layoutInflater.inflate(R.layout.task_functions_layout, null)\r\n\r\n        taskFunctionLayoutView.FunctionCloseButton.setOnClickListener {\r\n            popupFunctionWindow.dismiss()\r\n\r\n            popupPresent = false\r\n        }\r\n\r\n        taskFunctionLayoutView.FunctionSettingsButton.setOnClickListener {\r\n            popupFunctionWindow.dismiss()\r\n\r\n            popupPresent = false\r\n\r\n            createSettingsPopup()\r\n        }\r\n\r\n        //Sets the delete button to remove the task\r\n        taskFunctionLayoutView.FunctionDeleteButton.setOnClickListener {\r\n            for(i in TaskLayout.childCount downTo 0 step 1)\r\n            {\r\n                val tempChild = TaskLayout.getChildAt(i)\r\n                if(tempChild is TaskBox)\r\n                {\r\n                    if(tempChild == currentTask)\r\n                    {\r\n                        TaskLayout.removeView(TaskLayout.getChildAt(i))\r\n                        currentChecklist.deleteTask(i, currentUser)\r\n\r\n                        //remake the local file\r\n                        GlobalScope.launch {\r\n                            deleteListDataFile()\r\n                            createListFile(currentChecklist)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            popupFunctionWindow.dismiss()\r\n\r\n            popupPresent = false\r\n        }\r\n\r\n        popupFunctionWindow.contentView = taskFunctionLayoutView\r\n\r\n        popupFunctionWindow.setOnDismissListener {\r\n            PopupWindow.OnDismissListener {\r\n                popupPresent = false\r\n            }\r\n        }\r\n\r\n        //Sets the on lick listener for the new task gui element\r\n        new_task_box.setOnClickListener{\r\n\r\n            if(!popupPresent) {\r\n\r\n                popupPresent = true\r\n\r\n                popupFunctionWindow.isFocusable()\r\n\r\n                popupFunctionWindow.showAtLocation(mainView, Gravity.CENTER, 0, 0)\r\n\r\n                for(i in TaskLayout.childCount downTo 0 step 1)\r\n                {\r\n                    val tempChild = TaskLayout.getChildAt(i)\r\n                    if(tempChild is TaskBox)\r\n                    {\r\n                        if(tempChild == new_task_box) {\r\n                            currentTask = tempChild\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        val taskLayout = findViewById<LinearLayout>(R.id.TaskLayout)\r\n\r\n        taskLayout.addView(new_task_box)\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        currentUser = User(intent.getIntExtra(\"UserID\", 0), intent.getStringExtra(\"UserName\"))\r\n        requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_base_checklist)\r\n        currentChecklist.listID = intent.getIntExtra(\"ChecklistID\", 0)\r\n        //line below gets the checklist name so that each checklist correctly\r\n        //displays their own tasks and no other checklist's tasks\r\n        currentChecklist.i_name = intent.getStringExtra(\"ListName\")\r\n\r\n        setSupportActionBar(findViewById(R.id.toolbar))\r\n\r\n        //creates a submenu named user\r\n        navigationView = findViewById(R.id.nav_view)\r\n        menu = navigationView.menu\r\n        subMenu = menu.addSubMenu(getString(R.string.SUB_MENU_TITLE))\r\n\r\n        //create a database access object\r\n        var db = Database()\r\n        //deleteListDataFile()\r\n\r\n        //if there's a local file, populate our list from that\r\n        if (listFileExists()){\r\n            currentChecklist.tasks = getListFromFile()\r\n            //Need to do things with this information TODO\r\n            //Currently this function recognizes if the completed\r\n            //time is 2 days old, but the compared string is never set\r\n            //and nothing is done\r\n            //add each task in currentChecklist to the page\r\n            for (Task in currentChecklist.tasks){\r\n                if (Task.compdatetime != null)\r\n                {\r\n                    val now = LocalDate.now()\r\n                    val formatter = DateTimeFormat.forPattern(\"yyyy-MM-dd\")\r\n                    val dt = formatter.parseDateTime(Task.compdatetime)\r\n                    val dead = dt.plusDays(2)\r\n                    if (now.isEqual(dead.toLocalDate()))\r\n                    {\r\n                        //we don't want the task\r\n                    }\r\n                    else\r\n                    {\r\n                        addTaskFromList(Task)\r\n                    }\r\n                }\r\n                else\r\n                    addTaskFromList(Task)\r\n            }\r\n\r\n            println(\"loaded list from local file\")\r\n\r\n            //in a new thread, get checklist data from the database to see if any changes\r\n            //have happened since last opened.\r\n            //if there's only one user on the list, don't do anything\r\n            //if (currentChecklist.users.size > 1) {\r\n            GlobalScope.launch {\r\n                /*Right here start up a loading swirly*/\r\n\r\n                //disable certain actions while data is being loaded from database\r\n                turnOnButtons()\r\n                turnOffButtons()\r\n\r\n                var list = currentChecklist\r\n                list.tasks = db.GetTasks(currentChecklist.listID!!)\r\n                list.users = db.GetUsers(currentChecklist.listID!!)\r\n                list.changes = db.GetChanges(currentChecklist.listID!!)\r\n\r\n                currentChecklist.users = list.users\r\n                currentChecklist.tasks = list.tasks\r\n                currentChecklist.changes = list.changes\r\n\r\n                this@BaseChecklist.runOnUiThread {\r\n                    val taskLayout = findViewById<LinearLayout>(R.id.TaskLayout)\r\n                    subMenu.clear()\r\n                    for ((i, up) in currentChecklist.users.withIndex()) {\r\n                        subMenu.add(0, Menu.FIRST + i, Menu.FIRST, up.Username)\r\n                    }\r\n                    taskLayout.removeAllViews()\r\n                    for (Task in currentChecklist.tasks)\r\n                    {\r\n                        if (Task.compdatetime != null)\r\n                        {\r\n                            val now = LocalDate.now()\r\n                            val formatter = DateTimeFormat.forPattern(\"yyyy-MM-dd\")\r\n                            val dt = formatter.parseDateTime(Task.compdatetime)\r\n                            val dead = dt.plusDays(2)\r\n                            if (now.isEqual(dead.toLocalDate()))\r\n                            {\r\n                                //we don't want the task\r\n                            }\r\n                            else\r\n                            {\r\n                                addTaskFromList(Task)\r\n                            }\r\n                        }\r\n                        else if (Task.name != \"\")\r\n                            addTaskFromList(Task)\r\n                    }\r\n                }\r\n\r\n//                    if (list != currentChecklist){\r\n                /*have a popup or something telling the user that the list has been updated*/\r\n                //currentChecklist = list\r\n                turnOnButtons()\r\n\r\n            }\r\n            //}\r\n        }\r\n\r\n        //if no local file exists, populate our list from the database\r\n        else{\r\n            println(\"loaded list from database\")\r\n            var currentTasks = db.GetTasks(intent.getIntExtra(\"ChecklistID\", 0))\r\n            currentChecklist.users = db.GetUsers(intent.getIntExtra(\"ChecklistID\", 0))\r\n            currentChecklist.changes = db.GetChanges(intent.getIntExtra(\"ChecklistID\", 0))\r\n            //Same issue as \"Need to do things with this information\" TODO\r\n            for (Task in currentTasks)\r\n            {\r\n                if (Task.compdatetime != null)\r\n                {\r\n                    val now = LocalDate.now()\r\n                    val formatter = DateTimeFormat.forPattern(\"yyyy-MM-dd\")\r\n                    val dt = formatter.parseDateTime(Task.compdatetime)\r\n                    val dead = dt.plusDays(2)\r\n                    if (now.isEqual(dead.toLocalDate()))\r\n                    {\r\n                        //we don't want the task\r\n                    }\r\n                    else\r\n                    {\r\n                        addTask(Task)\r\n                    }\r\n                }\r\n                else if (Task.name != \"\")\r\n                    addTask(Task)\r\n\r\n            }\r\n\r\n            //create a local file with the data\r\n            GlobalScope.launch {\r\n                createListFile(currentChecklist)\r\n            }\r\n\r\n        }\r\n\r\n\r\n        //allows the opening and closing of a nav drawer on the right side of the screen.\r\n        userLayout = findViewById(R.id.user_drawer_layout)\r\n//        val menuRight = findViewById<View>(R.id.menuRight) as ImageButton\r\n//        menuRight.setOnClickListener {\r\n//            if (userLayout.isDrawerOpen(GravityCompat.END)) {\r\n//                userLayout.closeDrawer(GravityCompat.END)\r\n//            } else {\r\n//                userLayout.openDrawer(GravityCompat.END)\r\n//            }\r\n//        }\r\n\r\n        //populates the submenu with the usernames of everyone on the list (stored in mUserList)\r\n        //Menu.FIRST + i gives each a unique ID, used later in the program.\r\n        for ((i, up) in currentChecklist.users.withIndex()) {\r\n            subMenu.add(0, Menu.FIRST + i, Menu.FIRST, up.Username)\r\n        }\r\n\r\n        //gets called whenever any item is selected in the nav menu\r\n        navigationView.setNavigationItemSelectedListener { menuItem ->\r\n            //handles all items in nav drawer that are created at compile time\r\n            if (!onOptionsItemSelected(menuItem))\r\n            {\r\n                //handles all items in nav drawer that are created at run time\r\n                val id = menuItem.itemId - Menu.FIRST\r\n                if (id < currentChecklist.users.size && id >= 0) {\r\n                    val up = currentChecklist.users[id]\r\n                    val tempIntent = Intent(this, UserLogin::class.java).apply {\r\n                        putExtra(\"id\", up.UserID)\r\n                        putExtra(\"uname\", up.Username)\r\n                        putExtra(\"fname\", up.FName)\r\n                        putExtra(\"lname\", up.LName)\r\n                    }\r\n                    startActivity(tempIntent)\r\n                }\r\n            }\r\n            // close drawer when item is tapped\r\n            userLayout.closeDrawers()\r\n            // Add code here to update the UI based on the item selected\r\n            // For example, swap UI fragments here\r\n\r\n            true\r\n        }\r\n\r\n        //handleIntent(intent)\r\n//        val adapter : SearchresultExpandableListAdapter = SearchresultExpandableListAdapter(this, groups);\r\n//        listView.setAdapter(adapter)\r\n\r\n        val addButton = findViewById<Button>(R.id.AddTaskButton)\r\n        val checkoffButton = findViewById<Button>(R.id.CheckoffButton)\r\n        val historyButton = findViewById<Button>(R.id.HistoryButton)\r\n\r\n        //Creates the click listener for the add button\r\n        val addListener = View.OnClickListener {\r\n\r\n                //If there is not a popup already [resent\r\n            if(!popupPresent) {\r\n\r\n                //Get the view containing all the tasks\r\n                val mainView = findViewById<ScrollView>(R.id.TaskScrollView)\r\n\r\n                val popupWindow = PopupWindow(this)\r\n                //Create a view that is of the popup_layout in resources\r\n                val popupView = layoutInflater.inflate(R.layout.popup_layout, null)\r\n                //Sets the content of the popup to the popup_layout\r\n                popupWindow.contentView = popupView\r\n                //Retrieves the acceptButton from the popup\r\n                val acceptButton = popupView.PopupMainView.AcceptButton\r\n\r\n                //Creates and adds the on click action to the add button\r\n                acceptButton.setOnClickListener{\r\n\r\n                        val popup_edittext = popupView.PopupMainView.PopupEditText\r\n\r\n                        //Retrieves the name of the task if the name is long enough\r\n                        if (popup_edittext.text.toString().length >= 1) {\r\n                            createNewTask(popup_edittext.text.toString(), false, 0/*needs to be something later*/)\r\n                            //currentChecklist.createTask(popup_edittext.text.toString(),\r\n                            //   \"none\", User(intent.getIntExtra(\"UserID\", 0)))\r\n                        }\r\n\r\n                    //Set dismiss listener\r\n                    popupWindow.setOnDismissListener {\r\n                        popupPresent = false\r\n                    }\r\n                    //Dismisses the popup\r\n                    popupWindow.dismiss()\r\n                }\r\n                //Set cancel button to dismiss the popup\r\n                val cancelButton = popupView.PopupMainView.CancelButton\r\n\r\n                cancelButton.setOnClickListener(View.OnClickListener {\r\n\r\n                    popupWindow.dismiss()\r\n\r\n                })\r\n                //Have the popup clean up items when dismissed\r\n                popupWindow.setOnDismissListener(PopupWindow.OnDismissListener {\r\n                    val popupEdittext = popupView.PopupMainView.PopupEditText\r\n\r\n                    popupEdittext.text.clear()\r\n\r\n                    popupPresent = false\r\n                })\r\n\r\n                popupWindow.isFocusable = true\r\n\r\n                popupWindow.showAtLocation(mainView, Gravity.CENTER, 0, 0)\r\n\r\n                popupPresent = true\r\n\r\n            }\r\n        }\r\n\r\n        addButton.setOnClickListener(addListener)\r\n        //Create the click listener for the checkoff button\r\n        val checkoffListener = View.OnClickListener {\r\n\r\n            var taskCount = TaskLayout.childCount - 1\r\n            //Checks all current gui elements to see if they are checked\r\n            while (taskCount >= 0)\r\n            {\r\n                val currentChild = TaskLayout.getChildAt(taskCount)\r\n\r\n                if(currentChild is TaskBox)\r\n                {\r\n                    val taskSwitch = currentChild.getChildAt(1)\r\n\r\n                    if(taskSwitch is CheckBox)\r\n                    {\r\n                        if(taskSwitch.isChecked)\r\n                        {\r\n                            if(!currentChild.checkCompletion()) {\r\n                                if (currentChild.checkReccurring()) {\r\n                                    createNewTask(currentChild.getTaskText(), true, 0/*needs to be something later*/)\r\n                                    //currentChecklist.createTask(currentChild.getTaskText(), \"enable Later\", User(1))\r\n                                }\r\n\r\n                                currentChild.completeTask()\r\n\r\n                                //TaskLayout.removeView(TaskLayout.getChildAt(taskCount))\r\n\r\n                                currentChecklist.completeTask(taskCount, currentUser)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                taskCount--\r\n            }\r\n        }\r\n\r\n        checkoffButton.setOnClickListener(checkoffListener)\r\n\r\n        //Set history button's click listener\r\n\r\n        val historyListener = View.OnClickListener {\r\n            //Toast.makeText(this, \"General Kenobi!\", Toast.LENGTH_SHORT).show()\r\n\r\n            if(!popupPresent) {\r\n\r\n                val mainViewHistory = findViewById<ScrollView>(R.id.TaskScrollView)\r\n\r\n                val popupWindowHistory = PopupWindow(this)\r\n\r\n                val popupViewHistory = layoutInflater.inflate(R.layout.history_popup, null)\r\n\r\n                popupWindowHistory.contentView = popupViewHistory\r\n\r\n\r\n                val cancelListener = View.OnClickListener {\r\n                    popupWindowHistory.dismiss()\r\n                }\r\n\r\n                val dismissListener = PopupWindow.OnDismissListener {\r\n                    popupPresent = false\r\n                }\r\n\r\n                popupWindowHistory.setOnDismissListener(dismissListener)\r\n\r\n                popupViewHistory.HistoryCloseButton.setOnClickListener(cancelListener)\r\n\r\n                popupPresent = true\r\n\r\n                popupWindowHistory.isFocusable = true\r\n\r\n                val historyIterator = currentChecklist.changes.iterator()\r\n\r\n                val historyLayout = popupViewHistory.HistoryLinearLayout\r\n\r\n                //Check to see if not changes have happened\r\n                //Displays a message for each change that has occurred\r\n                if(currentChecklist.changes.isEmpty()) {\r\n                    val checklistChangeTextView = TextView(this)\r\n\r\n                    var toAddString = \"No Changes in this checklist!\"\r\n\r\n                    checklistChangeTextView.text = toAddString\r\n\r\n                    checklistChangeTextView.setTextColor(Color.WHITE)\r\n\r\n                    checklistChangeTextView.textSize = 30f\r\n                    checklistChangeTextView.layoutParams = LinearLayout.LayoutParams(\r\n                        LinearLayout.LayoutParams.WRAP_CONTENT,\r\n                        ViewGroup.LayoutParams.WRAP_CONTENT\r\n                    )\r\n\r\n                    historyLayout.addView(checklistChangeTextView)\r\n                }\r\n                else {\r\n                    historyIterator.forEach {\r\n\r\n                        val checklistChangeTextView = TextView(this)\r\n\r\n                        var toAddString = \"Default\"\r\n\r\n                        when(it.changeType) {\r\n\r\n                            kAction.CREATE_TASK -> toAddString = \"--- Task Added: \" + it.taskName +\r\n                                    \"\\n\\tAdded By: \" +  it.changedBy + \"\\n\"\r\n                            kAction.DELETE_TASK -> toAddString = \"--- Task Deleted: \" + it.taskName +\r\n                                    \"\\n\\tDeleted By: \" + it.changedBy + \"\\n\"\r\n                            kAction.COMPLETE_TASK -> toAddString = \"--- Task Completed: \" + it.taskName +\r\n                                    \"\\n\\tCompleted By: \" + it.changedBy + \"\\n\"\r\n                            kAction.CHANGE_TASK_NAME -> toAddString = \"--- Task Edited: \" + it.taskName +\r\n                                    \"\\n\\tChanged To: \" + it.changedTo + \"\\n\\tEdited By: \" + it.changedBy + \"\\n\"\r\n                            kAction.CHANGE_TASK_DEADLINE -> toAddString = \"--- Deadline Changed: \" + it.taskName +\r\n                                    \"\\n\\tChanged to: \" + it.changedTo + \"\\n\\tEdited By: \" + it.changedBy + \"\\n\"\r\n                            kAction.REMOVE_TASK_DEADLINE -> toAddString + \"--- Deadline Removed: \" + it.taskName +\r\n                                    \"\\n\\tRemoved By: \" + it.changedBy  + \"\\n\"\r\n                            kAction.ADD_USER -> toAddString = \"--- User Added: \" + it.changedTo +\r\n                                    \"\\n\\tAdded by: \" + it.changedBy + \"\\n\"\r\n                        }\r\n\r\n                        checklistChangeTextView.text = toAddString\r\n\r\n                        checklistChangeTextView.setTextColor(Color.WHITE)\r\n\r\n                        checklistChangeTextView.textSize = 20f\r\n                        checklistChangeTextView.layoutParams = LinearLayout.LayoutParams(\r\n                            LinearLayout.LayoutParams.WRAP_CONTENT,\r\n                            ViewGroup.LayoutParams.WRAP_CONTENT\r\n                        )\r\n\r\n                        historyLayout.addView(checklistChangeTextView)\r\n                    }\r\n                }\r\n\r\n                popupWindowHistory.showAtLocation(mainViewHistory, Gravity.CENTER, 0, 0)\r\n            }\r\n        }\r\n\r\n        historyButton.setOnClickListener(historyListener)\r\n    }\r\n\r\n    fun createListFile(list: Checklist) {\r\n        //convert list to a JSON string\r\n        val gson = Gson()\r\n        val userJson = gson.toJson(list.tasks)\r\n\r\n        //context will give us access to our local files directory\r\n        var context = applicationContext\r\n\r\n        val filename = list.i_name\r\n        val directory = context.filesDir\r\n\r\n        //write the file to local directory\r\n        //the filename will be the name of the list\r\n        val file = File(directory, filename)\r\n        FileOutputStream(file).use {\r\n            it.write(userJson.toByteArray())\r\n        }\r\n    }\r\n\r\n    fun listFileExists() : Boolean {\r\n        return File(applicationContext.filesDir, currentChecklist.i_name).exists()\r\n    }\r\n\r\n    //we don't have to check if the file exists in this function\r\n    //because we call listFileExists() before calling this\r\n    //however, we might need some other error checking in here\r\n    fun getListFromFile() : MutableList<Task> {\r\n        //context will give us access to our local files directory\r\n        var context = applicationContext\r\n\r\n        val filename = currentChecklist.i_name\r\n        val directory = context.filesDir\r\n\r\n        //read from the file and store it as a string\r\n        val file = File(directory, filename)\r\n        val fileData = FileInputStream(file).bufferedReader().use { it.readText() }\r\n\r\n        //create a Checklist object based on the JSON from the file\r\n        val gson = Gson()\r\n        return gson.fromJson(fileData, object : TypeToken<MutableList<Task>>() {}.type)\r\n    }\r\n\r\n    fun deleteListDataFile(){\r\n        //context will give us access to our local files directory\r\n        var context = applicationContext\r\n\r\n        val filename = currentChecklist.i_name\r\n        val directory = context.filesDir\r\n\r\n        //delete the file\r\n        File(directory, filename).delete()\r\n    }\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        //handles all nav drawer activity that was added at run time.\r\n        return when (item.itemId) {\r\n            android.R.id.home -> {\r\n                userLayout.openDrawer(GravityCompat.START)\r\n                true\r\n            }\r\n            R.id.users_drawer -> {\r\n                if (userLayout.isDrawerOpen(GravityCompat.END)) {\r\n                    userLayout.closeDrawer(GravityCompat.END)\r\n                } else {\r\n                    userLayout.openDrawer(GravityCompat.END)\r\n                }\r\n                //userLayout.openDrawer(GravityCompat.START)\r\n                true\r\n            }\r\n            else -> super.onOptionsItemSelected(item)\r\n        }\r\n    }\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        // Inflate the options menu from XML\r\n        val inflater = menuInflater\r\n        inflater.inflate(R.menu.options_menu, menu)\r\n\r\n        // Get the SearchView and set the searchable configuration\r\n        val searchManager = getSystemService(Context.SEARCH_SERVICE) as SearchManager\r\n        (menu.findItem(R.id.search).actionView as SearchView).apply {\r\n            // Assumes current activity is the searchable activity\r\n            setSearchableInfo(searchManager.getSearchableInfo(componentName))\r\n            setIconifiedByDefault(false) // Do not iconify the widget; expand it by default\r\n        }\r\n\r\n        return true\r\n    }\r\n    private fun handleIntent(intent: Intent) {\r\n\r\n        if (Intent.ACTION_SEARCH == intent.action) {\r\n            val query = intent.getStringExtra(SearchManager.QUERY)\r\n            //use the query to search your data somehow\r\n        }\r\n    }\r\n    private fun turnOffButtons() {\r\n        val turnOff: Button = findViewById(R.id.AddTaskButton)\r\n        turnOff.isClickable = false\r\n        val turnOff2 : Button = findViewById(R.id.CheckoffButton)\r\n        turnOff2.isClickable = false\r\n        taskFlag = false\r\n    }\r\n    private fun turnOnButtons() {\r\n\r\n        var turnOn : Button = findViewById(R.id.AddTaskButton)\r\n        turnOn.isClickable = true\r\n        turnOn = findViewById(R.id.CheckoffButton)\r\n        turnOn.isClickable = true\r\n        taskFlag = true\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/doug/checklistpresentlayer/BaseChecklist.kt	(revision c7005efbdba835414f249d481c9a4514c133321c)
+++ app/src/main/java/com/example/doug/checklistpresentlayer/BaseChecklist.kt	(date 1556134961427)
@@ -715,6 +715,8 @@
                             addTaskFromList(Task)
                     }
                 }
+                deleteListDataFile()
+                createListFile(currentChecklist)
 
 //                    if (list != currentChecklist){
                 /*have a popup or something telling the user that the list has been updated*/
Index: .idea/shelf/changed_the_wait_to_a_loop.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><changelist name=\"changed_the_wait_to_a_loop\" date=\"1551411701183\" recycled=\"false\">\r\n  <option name=\"PATH\" value=\"$PROJECT_DIR$/.idea/shelf/changed_the_wait_to_a_loop/shelved.patch\" />\r\n  <option name=\"DESCRIPTION\" value=\"changed the wait to a loop\" />\r\n</changelist>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/shelf/changed_the_wait_to_a_loop.xml	(revision c7005efbdba835414f249d481c9a4514c133321c)
+++ .idea/shelf/changed_the_wait_to_a_loop.xml	(date 1556130250026)
Index: .idea/shelf/gets_tasks_from_database_when_pulling_from_local_list.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><changelist name=\"gets_tasks_from_database_when_pulling_from_local_list\" date=\"1556039344142\" recycled=\"false\">\r\n  <option name=\"PATH\" value=\"$PROJECT_DIR$/.idea/shelf/gets_tasks_from_database_when_pulling_from_local_list/shelved.patch\" />\r\n  <option name=\"DESCRIPTION\" value=\"gets tasks from database when pulling from local list\" />\r\n</changelist>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/shelf/gets_tasks_from_database_when_pulling_from_local_list.xml	(revision c7005efbdba835414f249d481c9a4514c133321c)
+++ .idea/shelf/gets_tasks_from_database_when_pulling_from_local_list.xml	(date 1556130250034)
Index: .idea/shelf/changed_some_GUI_stuff.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><changelist name=\"changed_some_GUI_stuff\" date=\"1555874089504\" recycled=\"false\">\r\n  <option name=\"PATH\" value=\"$PROJECT_DIR$/.idea/shelf/changed_some_GUI_stuff/shelved.patch\" />\r\n  <option name=\"DESCRIPTION\" value=\"changed some GUI stuff\" />\r\n</changelist>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/shelf/changed_some_GUI_stuff.xml	(revision c7005efbdba835414f249d481c9a4514c133321c)
+++ .idea/shelf/changed_some_GUI_stuff.xml	(date 1556130250017)
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"NullableNotNullManager\">\r\n    <option name=\"myDefaultNullable\" value=\"android.support.annotation.Nullable\" />\r\n    <option name=\"myDefaultNotNull\" value=\"android.support.annotation.NonNull\" />\r\n    <option name=\"myNullables\">\r\n      <value>\r\n        <list size=\"10\">\r\n          <item index=\"0\" class=\"java.lang.String\" itemvalue=\"org.jetbrains.annotations.Nullable\" />\r\n          <item index=\"1\" class=\"java.lang.String\" itemvalue=\"javax.annotation.Nullable\" />\r\n          <item index=\"2\" class=\"java.lang.String\" itemvalue=\"javax.annotation.CheckForNull\" />\r\n          <item index=\"3\" class=\"java.lang.String\" itemvalue=\"edu.umd.cs.findbugs.annotations.Nullable\" />\r\n          <item index=\"4\" class=\"java.lang.String\" itemvalue=\"android.support.annotation.Nullable\" />\r\n          <item index=\"5\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.Nullable\" />\r\n          <item index=\"6\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.RecentlyNullable\" />\r\n          <item index=\"7\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.qual.Nullable\" />\r\n          <item index=\"8\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.compatqual.NullableDecl\" />\r\n          <item index=\"9\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.compatqual.NullableType\" />\r\n        </list>\r\n      </value>\r\n    </option>\r\n    <option name=\"myNotNulls\">\r\n      <value>\r\n        <list size=\"9\">\r\n          <item index=\"0\" class=\"java.lang.String\" itemvalue=\"org.jetbrains.annotations.NotNull\" />\r\n          <item index=\"1\" class=\"java.lang.String\" itemvalue=\"javax.annotation.Nonnull\" />\r\n          <item index=\"2\" class=\"java.lang.String\" itemvalue=\"edu.umd.cs.findbugs.annotations.NonNull\" />\r\n          <item index=\"3\" class=\"java.lang.String\" itemvalue=\"android.support.annotation.NonNull\" />\r\n          <item index=\"4\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.NonNull\" />\r\n          <item index=\"5\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.RecentlyNonNull\" />\r\n          <item index=\"6\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.qual.NonNull\" />\r\n          <item index=\"7\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.compatqual.NonNullDecl\" />\r\n          <item index=\"8\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.compatqual.NonNullType\" />\r\n        </list>\r\n      </value>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" project-jdk-name=\"1.8 (1)\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision c7005efbdba835414f249d481c9a4514c133321c)
+++ .idea/misc.xml	(date 1556130347275)
@@ -35,7 +35,7 @@
       </value>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" project-jdk-name="1.8 (1)" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">

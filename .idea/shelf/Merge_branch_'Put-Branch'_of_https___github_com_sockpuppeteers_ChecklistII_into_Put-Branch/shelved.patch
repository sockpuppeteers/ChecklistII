Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\n    <string name=\"app_name\">Pontim</string>\n    <string name=\"ADD_BUTTON_STRING\">Add</string>\n    <string name=\"CHECKOFF_BUTTON_STRING\">Checkoff</string>\n    <string name=\"HISTORY_BUTTON_STRING\">History</string>\n    <string name=\"EDIT_BUTTON_STRING\">Edit</string>\n    <string name=\"ACCEPT_BUTTON_STRING\">Accept</string>\n    <string name=\"CANCEL_BUTTON_STRING\">Close</string>\n    <string name=\"POPUP_ADD_HINT\">Enter Task Name</string>\n    <string name=\"POPUP_HISTORY_TEXT\">History</string>\n    <string name=\"FUNCTION_POPUP_DELETE_TEXT\">Delete</string>\n    <string name=\"FUNCTION_POPUP_SETTINGS_TEXT\">Settings</string>\n    <string name=\"FUNCTION_POPUP_CLOSE_TEXT\">Close</string>\n    <string name=\"RECURSION_TEXT\">Task Recursion</string>\n    <string name=\"USER_TEXT\">User</string>\n    <string name=\"ICON_TEXT\">Icon for selected user</string>\n    <string name=\"EMAIL_TEXT\">Email</string>\n    <string name=\"FIRST_NAME_TEXT\">First Name</string>\n    <string name=\"LAST_NAME_TEXT\">Last Name</string>\n    <string name=\"USERNAME_TEXT\">UserName</string>\n    <string name=\"PASSWORD_TEXT\">Password</string>\n    <string name=\"LOGIN_TEXT\">Login</string>\n    <string name=\"REGISTER_TEXT\">Register</string>\n    <string name=\"FORGOT_TEXT\">Forgot UserName or Password?</string>\n    <string name=\"DEADLINE_TEXT\">Deadline</string>\n    <string name=\"SUNDAY_TEXT\">Sunday</string>\n    <string name=\"MONDAY_TEXT\">Monday</string>\n    <string name=\"TUESDAY_TEXT\">Tuesday</string>\n    <string name=\"WEDNESDAY_TEXT\">Wednesday</string>\n    <string name=\"THURSDAY_TEXT\">Thursday</string>\n    <string name=\"FRIDAY_TEXT\">Friday</string>\n    <string name=\"SATURDAY_TEXT\">Saturday</string>\n    <string name=\"DATE_SELECTION_TEXT\">Recurring Days</string>\n    <string name=\"ADD_USER_TEXT\">Add User</string>\n    <string name=\"SUB_MENU_TITLE\">Users</string>\n    <string name=\"SEARCH_TEXT\">Search Users</string>\n    <string-array name=\"MINUTES_TEXT\">\n        <item>00</item>\n        <item>05</item>\n        <item>10</item>\n        <item>15</item>\n        <item>20</item>\n        <item>25</item>\n        <item>30</item>\n        <item>35</item>\n        <item>40</item>\n        <item>45</item>\n        <item>50</item>\n        <item>55</item>\n    </string-array>\n    <string-array name=\"HOUR_TEXT\">\n        <item>1</item>\n        <item>2</item>\n        <item>3</item>\n        <item>4</item>\n        <item>5</item>\n        <item>6</item>\n        <item>7</item>\n        <item>8</item>\n        <item>9</item>\n        <item>10</item>\n        <item>11</item>\n        <item>12</item>\n    </string-array>\n    <string-array name=\"AM_PM_TEXT\">\n        <item>AM</item>\n        <item>PM</item>\n    </string-array>\n    <string name=\"DAILY_DEADLINE_TEXT\">Daily Deadline</string>\n    <string name=\"CLEAR_DEADLINE_TEXT\">Clear Deadline</string>\n    <!-- This allows the string text to be colored, this may have issues with 2.x or 4.x android systems-->\n    <string name=\"LOGOUT_TEXT\"><font fgcolor='#FF0000'>Log out</font></string>\n    <string name=\"CURRENT_DEADLINE_TEXT\">Current Deadline: </string>\n    <string name=\"NO_DEADLINE_TEXT\">No Deadline</string>\n    <string name=\"NAME_CHANGE_TEXT\">Change Task Name</string>\n    <string name=\"CANCEL_TEXT\">Cancel</string>\n    <string name=\"NEW_TEASK_NAME_TEXT\">New Task Name</string>\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/strings.xml	(date 1555293116000)
+++ app/src/main/res/values/strings.xml	(date 1555293121240)
@@ -34,6 +34,9 @@
     <string name="ADD_USER_TEXT">Add User</string>
     <string name="SUB_MENU_TITLE">Users</string>
     <string name="SEARCH_TEXT">Search Users</string>
+    <string name="LOGO_TEXT">Logo</string>
+    <string name="INCORRECT_TEXT">Incorrect username or password</string>
+    <string name="SOMETHING_TEXT">Something went wrong</string>
     <string-array name="MINUTES_TEXT">
         <item>00</item>
         <item>05</item>
Index: app/src/main/java/com/example/doug/checklistpresentlayer/BaseChecklist.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.doug.checklistpresentlayer\n\nimport android.content.Intent\nimport android.graphics.Color\nimport android.os.Bundle\nimport android.support.constraint.ConstraintLayout\nimport android.support.design.widget.NavigationView\nimport android.support.v4.view.GravityCompat\nimport android.support.v4.widget.DrawerLayout\nimport android.support.v7.app.ActionBar\nimport android.support.v7.app.AppCompatActivity\nimport android.support.v7.widget.Toolbar\nimport android.view.*\nimport android.widget.*\nimport com.google.gson.Gson\nimport kotlinx.android.synthetic.main.activity_base_checklist.*\nimport kotlinx.android.synthetic.main.history_popup.view.*\nimport kotlinx.android.synthetic.main.popup_layout.view.*\nimport kotlinx.android.synthetic.main.task_functions_layout.view.*\nimport kotlinx.android.synthetic.main.task_settings_deadline_popup.view.*\nimport kotlinx.android.synthetic.main.task_settings_name_change_popup.view.*\nimport kotlinx.android.synthetic.main.task_settings_popup.view.*\nimport kotlinx.android.synthetic.main.task_settings_recursion_popup.view.*\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.launch\nimport java.io.File\nimport java.io.FileInputStream\nimport java.io.FileOutputStream\nimport net.danlew.android.joda.DateUtils\n\nimport org.joda.time.DateTime\nimport org.joda.time.Duration\nimport org.joda.time.LocalDate\nimport kotlin.concurrent.thread\nimport android.widget.ImageButton\nimport org.joda.time.format.DateTimeFormat\nimport java.text.SimpleDateFormat\nimport java.time.format.DateTimeFormatter\n\n/********************************************\n *TO DO: Move listener assignments to functions\n ********************************************/\nclass BaseChecklist : AppCompatActivity(){\n\n    var currentChecklist = Checklist(\"Your Checklist\", 0 )\n\n    //Flag to see if any popups are present\n    var popupPresent = false\n\n    var currentTask: TaskBox? = null\n\n    private lateinit var userLayout: DrawerLayout\n    //private val mUserList = ArrayList<UserPage>()\n\n    //Intialize things here\n    init {\n\n    }\n\n    private fun createSettingsPopup() {\n        if (!popupPresent ) {\n            popupPresent = true\n\n            val mainView = findViewById<ScrollView>(R.id.TaskScrollView)\n\n            val popupSettingsWindow = PopupWindow(this)\n\n            val taskSettingsLayoutView =\n                layoutInflater.inflate(R.layout.task_settings_popup, null)\n\n            var taskCount = TaskLayout.childCount\n            var found = false\n            //Checks all current gui elements to see if they are checked\n            while (taskCount >= 0 && ! found) {\n                taskCount--\n\n                val currentChild = TaskLayout.getChildAt(taskCount)\n\n                if (currentChild is TaskBox) {\n                        if(currentChild == currentTask) {\n                        found = true\n                    }\n                }\n            }\n\n            popupSettingsWindow.contentView = taskSettingsLayoutView\n\n            /**************\n             *   Deadline Button Displays Deadline popup\n             ***************/\n            taskSettingsLayoutView.DeadlineButton.setOnClickListener {\n\n                popupSettingsWindow.dismiss()\n\n                val popupSettingsDeadlineWindow = PopupWindow(this)\n\n                val taskSettingsDeadlineLayoutView =\n                    layoutInflater.inflate(R.layout.task_settings_deadline_popup, null)\n\n                var tempString = \"\"\n\n                popupSettingsDeadlineWindow.contentView = taskSettingsDeadlineLayoutView\n\n                if(currentChecklist.tasks[taskCount].Deadline != null) {\n                    tempString =\n                        getString(R.string.CURRENT_DEADLINE_TEXT) + \" \" + currentChecklist.tasks[taskCount].Deadline.toString()\n\n                    taskSettingsDeadlineLayoutView.CurrentDeadlineTextView.text = tempString\n                }\n                else {\n                    taskSettingsDeadlineLayoutView.CurrentDeadlineTextView.text = getString(R.string.NO_DEADLINE_TEXT)\n                }\n\n                taskSettingsDeadlineLayoutView.ClearDeadlineButton.setOnClickListener {\n                    taskSettingsDeadlineLayoutView.CurrentDeadlineTextView.text = getString(R.string.NO_DEADLINE_TEXT)\n\n                    currentChecklist.removeDeadline(taskCount, User(1))\n                }\n\n                taskSettingsDeadlineLayoutView.DeadlineCalendarView.setOnDateChangeListener{_, year, month, day ->\n                    tempString =\n                        getString(R.string.CURRENT_DEADLINE_TEXT) + \" \" + day + \"/\" + month + \"/\" + year\n\n                    taskSettingsDeadlineLayoutView.CurrentDeadlineTextView.text = tempString\n\n                    currentChecklist.changeTaskDeadline(taskCount,User(1),\"$day/$month/$year\")\n                }\n\n                taskSettingsDeadlineLayoutView.closeDeadlineButton.setOnClickListener{\n\n                    popupSettingsDeadlineWindow.dismiss()\n\n                    popupPresent = false\n                }\n\n                popupSettingsDeadlineWindow.setOnDismissListener {\n                    popupPresent = false\n                }\n\n                popupSettingsDeadlineWindow.isFocusable = true\n\n                popupSettingsDeadlineWindow.showAtLocation(mainView, Gravity.CENTER, 0, 0)\n            }\n\n            /**************\n             *   Recursion Button Displays Task Recursion popup\n             ***************/\n            taskSettingsLayoutView.RecursionButton.setOnClickListener {\n\n                popupSettingsWindow.dismiss()\n\n                val popupSettingsRecurringWindow = PopupWindow(this)\n\n                val taskSettingsRecurringLayoutView =\n                    layoutInflater.inflate(R.layout.task_settings_recursion_popup, null)\n\n                popupSettingsRecurringWindow.contentView = taskSettingsRecurringLayoutView\n\n                taskSettingsRecurringLayoutView.CloseRecurringButton.setOnClickListener{\n\n                    popupSettingsRecurringWindow.dismiss()\n\n                    popupPresent = false\n                }\n\n                taskSettingsRecurringLayoutView.RecursionSwitch.isChecked =\n                    currentTask?.checkReccurring() != null && currentTask?.checkReccurring() == true\n\n                taskSettingsRecurringLayoutView.RecursionSwitch.setOnClickListener {\n                    currentTask?.toggleReccurringIfNotComplete()\n                }\n\n                popupSettingsRecurringWindow.setOnDismissListener {\n                    popupPresent = false\n                }\n\n                popupSettingsRecurringWindow.isFocusable = true\n\n                popupSettingsRecurringWindow.showAtLocation(mainView, Gravity.CENTER, 0, 0)\n            }\n\n            taskSettingsLayoutView.ChangeNameSettingsButton.setOnClickListener {\n\n                popupSettingsWindow.dismiss()\n\n                val popupSettingsChangeNameWindow = PopupWindow(this)\n\n                val taskSettingsChangeNameLayoutView =\n                    layoutInflater.inflate(R.layout.task_settings_name_change_popup, null)\n\n                popupSettingsChangeNameWindow.contentView = taskSettingsChangeNameLayoutView\n\n                taskSettingsChangeNameLayoutView.ChangeNameButton.setOnClickListener {\n\n                    val newName = taskSettingsChangeNameLayoutView.NewNameText.text.toString()\n\n                    currentTask?.ChangeName(newName)\n\n                    currentChecklist.changeTaskName(taskCount, User(1), newName)\n\n                    popupPresent = false\n\n                    popupSettingsChangeNameWindow.dismiss()\n                }\n\n                popupSettingsChangeNameWindow.setOnDismissListener {\n                    popupPresent = false\n                }\n\n                taskSettingsChangeNameLayoutView.ChangeNameCancelButton.setOnClickListener {\n                    popupPresent = false\n\n                    popupSettingsChangeNameWindow.dismiss()\n                }\n\n                popupSettingsChangeNameWindow.isFocusable = true\n\n                popupSettingsChangeNameWindow.showAtLocation(mainView, Gravity.CENTER, 0, 0)\n            }\n\n            taskSettingsLayoutView.CloseButton.setOnClickListener {\n                popupSettingsWindow.dismiss()\n                popupPresent = false\n            }\n\n            popupSettingsWindow.setOnDismissListener {\n                popupPresent = false\n            }\n\n            taskSettingsLayoutView.taskNameView.text = currentTask?.getTaskText()\n\n            popupSettingsWindow.isFocusable = true\n\n            popupSettingsWindow.showAtLocation(mainView, Gravity.CENTER, 0, 0)\n        }\n    }\n\n    fun createNewTask(TaskText: String, IsReaccuring: Boolean, taskID: Int?) {\n        var new_task_box = TaskBox(\n            this,\n            TaskText\n        )\n\n        if(IsReaccuring)\n            new_task_box.toggleReccurringIfNotComplete()\n\n        val mainView = findViewById<ScrollView>(R.id.TaskScrollView)\n\n        //Adds the task to the checklist\n        currentChecklist.createTask(TaskText, null, User(intent.getIntExtra(\"UserID\", 0)), null, currentChecklist.listID!!)\n\n        //rebuild the local file with the updated checklist\n        GlobalScope.launch {\n            deleteListDataFile()\n            createListFile(currentChecklist)\n        }\n\n        val popupFunctionWindow = PopupWindow(this)\n\n        val taskFunctionLayoutView =\n            layoutInflater.inflate(R.layout.task_functions_layout, null)\n\n        taskFunctionLayoutView.FunctionCloseButton.setOnClickListener {\n            popupFunctionWindow.dismiss()\n\n            popupPresent = false\n        }\n\n        taskFunctionLayoutView.FunctionSettingsButton.setOnClickListener {\n            popupFunctionWindow.dismiss()\n\n            popupPresent = false\n\n            createSettingsPopup()\n        }\n\n        //Sets the delete button to remove the task\n        taskFunctionLayoutView.FunctionDeleteButton.setOnClickListener {\n            for(i in TaskLayout.childCount downTo 0 step 1)\n            {\n                val tempChild = TaskLayout.getChildAt(i)\n                if(tempChild is TaskBox)\n                {\n                    if(tempChild == currentTask)\n                    {\n                        TaskLayout.removeView(TaskLayout.getChildAt(i))\n                        //remove the task from the list, and delete it from the database\n                        currentChecklist.deleteTask(i, User(1))\n\n                        //update the local file\n                        GlobalScope.launch {\n                            deleteListDataFile()\n                            createListFile(currentChecklist)\n                        }\n                    }\n                }\n            }\n\n            popupFunctionWindow.dismiss()\n\n            popupPresent = false\n        }\n\n        popupFunctionWindow.contentView = taskFunctionLayoutView\n\n        popupFunctionWindow.setOnDismissListener {\n            PopupWindow.OnDismissListener {\n                popupPresent = false\n            }\n        }\n\n        //Sets the on lick listener for the new task gui element\n        new_task_box.setOnClickListener{\n\n            if(!popupPresent) {\n\n                popupPresent = true\n\n                popupFunctionWindow.isFocusable()\n\n                popupFunctionWindow.showAtLocation(mainView, Gravity.CENTER, 0, 0)\n\n                for(i in TaskLayout.childCount downTo 0 step 1)\n                {\n                    val tempChild = TaskLayout.getChildAt(i)\n                    if(tempChild is TaskBox)\n                    {\n                        if(tempChild == new_task_box) {\n                            currentTask = tempChild\n                        }\n                    }\n                }\n            }\n        }\n\n        val taskLayout = findViewById<LinearLayout>(R.id.TaskLayout)\n\n        taskLayout.addView(new_task_box)\n    }\n\n    fun addTask(task: Task) {\n        var new_task_box = TaskBox(\n            this,\n            task.name\n        )\n\n        if(task.isRecurring == true)\n            new_task_box.toggleReccurringIfNotComplete()\n\n        val mainView = findViewById<ScrollView>(R.id.TaskScrollView)\n\n        //Adds the task to the checklist\n        currentChecklist.tasks.add(task)\n\n        val popupFunctionWindow = PopupWindow(this)\n\n        val taskFunctionLayoutView =\n            layoutInflater.inflate(R.layout.task_functions_layout, null)\n\n        taskFunctionLayoutView.FunctionCloseButton.setOnClickListener {\n            popupFunctionWindow.dismiss()\n\n            popupPresent = false\n        }\n\n        taskFunctionLayoutView.FunctionSettingsButton.setOnClickListener {\n            popupFunctionWindow.dismiss()\n\n            popupPresent = false\n\n            createSettingsPopup()\n        }\n\n        //Sets the delete button to remove the task\n        taskFunctionLayoutView.FunctionDeleteButton.setOnClickListener {\n            for(i in TaskLayout.childCount downTo 0 step 1)\n            {\n                val tempChild = TaskLayout.getChildAt(i)\n                if(tempChild is TaskBox)\n                {\n                    if(tempChild == currentTask)\n                    {\n                        TaskLayout.removeView(TaskLayout.getChildAt(i))\n                        currentChecklist.deleteTask(i, User(1));\n                    }\n                }\n            }\n\n            popupFunctionWindow.dismiss()\n\n            popupPresent = false\n        }\n\n        popupFunctionWindow.contentView = taskFunctionLayoutView\n\n        popupFunctionWindow.setOnDismissListener {\n            PopupWindow.OnDismissListener {\n                popupPresent = false\n            }\n        }\n\n        //Sets the on lick listener for the new task gui element\n        new_task_box.setOnClickListener{\n\n            if(!popupPresent) {\n\n                popupPresent = true\n\n                popupFunctionWindow.isFocusable()\n\n                popupFunctionWindow.showAtLocation(mainView, Gravity.CENTER, 0, 0)\n\n                for(i in TaskLayout.childCount downTo 0 step 1)\n                {\n                    val tempChild = TaskLayout.getChildAt(i)\n                    if(tempChild is TaskBox)\n                    {\n                        if(tempChild == new_task_box) {\n                            currentTask = tempChild\n                        }\n                    }\n                }\n            }\n        }\n\n        val taskLayout = findViewById<LinearLayout>(R.id.TaskLayout)\n\n        taskLayout.addView(new_task_box)\n    }\n\n    fun addTaskFromList(task: Task) {\n        var new_task_box = TaskBox(\n            this,\n            task.name\n        )\n\n        if(task.isRecurring == true)\n            new_task_box.toggleReccurringIfNotComplete()\n\n        val mainView = findViewById<ScrollView>(R.id.TaskScrollView)\n\n        val popupFunctionWindow = PopupWindow(this)\n\n        val taskFunctionLayoutView =\n            layoutInflater.inflate(R.layout.task_functions_layout, null)\n\n        taskFunctionLayoutView.FunctionCloseButton.setOnClickListener {\n            popupFunctionWindow.dismiss()\n\n            popupPresent = false\n        }\n\n        taskFunctionLayoutView.FunctionSettingsButton.setOnClickListener {\n            popupFunctionWindow.dismiss()\n\n            popupPresent = false\n\n            createSettingsPopup()\n        }\n\n        //Sets the delete button to remove the task\n        taskFunctionLayoutView.FunctionDeleteButton.setOnClickListener {\n            for(i in TaskLayout.childCount downTo 0 step 1)\n            {\n                val tempChild = TaskLayout.getChildAt(i)\n                if(tempChild is TaskBox)\n                {\n                    if(tempChild == currentTask)\n                    {\n                        TaskLayout.removeView(TaskLayout.getChildAt(i))\n                        currentChecklist.deleteTask(i, User(1))\n\n                        //remake the local file\n                        GlobalScope.launch {\n                            deleteListDataFile()\n                            createListFile(currentChecklist)\n                        }\n                    }\n                }\n            }\n\n            popupFunctionWindow.dismiss()\n\n            popupPresent = false\n        }\n\n        popupFunctionWindow.contentView = taskFunctionLayoutView\n\n        popupFunctionWindow.setOnDismissListener {\n            PopupWindow.OnDismissListener {\n                popupPresent = false\n            }\n        }\n\n        //Sets the on lick listener for the new task gui element\n        new_task_box.setOnClickListener{\n\n            if(!popupPresent) {\n\n                popupPresent = true\n\n                popupFunctionWindow.isFocusable()\n\n                popupFunctionWindow.showAtLocation(mainView, Gravity.CENTER, 0, 0)\n\n                for(i in TaskLayout.childCount downTo 0 step 1)\n                {\n                    val tempChild = TaskLayout.getChildAt(i)\n                    if(tempChild is TaskBox)\n                    {\n                        if(tempChild == new_task_box) {\n                            currentTask = tempChild\n                        }\n                    }\n                }\n            }\n        }\n\n        val taskLayout = findViewById<LinearLayout>(R.id.TaskLayout)\n\n        taskLayout.addView(new_task_box)\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_base_checklist)\n        currentChecklist.listID = intent.getIntExtra(\"ChecklistID\", 0)\n        //line below gets the checklist name so that each checklist correctly\n        //displays their own tasks and no other checklist's tasks\n        currentChecklist.i_name = intent.getStringExtra(\"ListName\")\n\n        //create a database access object\n        var db = Database()\n\n        //if there's a local file, populate our list from that\n        if (listFileExists()){\n            //deleteListDataFile()\n            currentChecklist = getListFromFile()\n            //Need to do things with this information TODO\n            //Currently this function recognizes if the completed\n            //time is 2 days old, but the compared string is never set\n            //and nothing is done\n            //add each task in currentChecklist to the page\n            for (Task in currentChecklist.tasks){\n                if (Task.compdatetime != null)\n                {\n                    val now = LocalDate.now()\n                    val formatter = DateTimeFormat.forPattern(\"yyyy-MM-dd\")\n                    val dt = formatter.parseDateTime(Task.compdatetime)\n                    val dead = dt.plusDays(2)\n                    if (now.isEqual(dead.toLocalDate()))\n                    {\n                        //we don't want the task\n                    }\n                    else\n                    {\n                        addTaskFromList(Task)\n                    }\n                }\n                else\n                    addTaskFromList(Task)\n            }\n\n            println(\"loaded list from local file\")\n\n            //in a new thread, get checklist data from the database to see if any changes\n            //have happened since last opened.\n            //if there's only one user on the list, don't do anything\n\n            if (!currentChecklist.users.isEmpty()) {\n//                //THIS COMMENT BLOCK IS FOR MATT TODO\n//                //globalscope.launch starts a new thread, where all this will happen.\n//                //we DO NOT want the user to be able to change anything in their list while this thread is active.\n//                //we need code that will check if this thread is active in the thread pool.\n//                //on the surface, the app will look exactly the same, but there will be some sort of \"wait\" that happens\n//                //if the user tries to change something and this is still going on\n                GlobalScope.launch {\n                    /*Right here start up a loading swirly*/\n                    //var list = db.GetChecklist(currentChecklist.cListID!!)\n                    turnOnButtons()\n                    turnOffButtons()\n//                    if (list != currentChecklist){\n                    /*have a popup or something telling the user that the list has been updated*/\n                    //currentChecklist = list\n//                  turnOnButtons()\n\n                }\n            }\n        }\n\n        //if no local file exists, populate our list from the database\n        else{\n            println(\"loaded list from database\")\n            var currentTasks = db.GetTasks(intent.getIntExtra(\"ChecklistID\", 0))\n            //Same issue as \"Need to do things with this information\" TODO\n            for (Task in currentTasks)\n            {\n                if (Task.compdatetime != null)\n                {\n                    val now = LocalDate.now()\n                    val formatter = DateTimeFormat.forPattern(\"yyyy-MM-dd\")\n                    val dt = formatter.parseDateTime(Task.compdatetime)\n                    val dead = dt.plusDays(2)\n                    if (now.isEqual(dead.toLocalDate()))\n                    {\n                        //we don't want the task\n                    }\n                    else\n                    {\n                        addTask(Task)\n                    }\n                }\n                else if (Task.name != \"\")\n                    addTask(Task)\n\n            }\n\n            //create a local file with the data\n            GlobalScope.launch {\n                createListFile(currentChecklist)\n            }\n        }\n        //test code. replace with database/local storage call.\n        currentChecklist.addUser(User(1,\"Sally123\",\"Suzan\",\"McPoyle\", \"none\"))\n        currentChecklist.addUser(User(2,\"Roger123\",\"Roger\",\"McPoyle\", \"none\"))\n        currentChecklist.addUser(User(3,\"Rufus123\",\"Rufus\",\"McPoyle\", \"none\"))\n        currentChecklist.addUser(User(4,\"Gorgina123\",\"Gorgina\",\"McPoyle\", \"none\"))\n        //test code. replace with database/local storage call.\n\n        //allows the opening and closing of a nav drawer on the right side of the screen.\n        userLayout = findViewById(R.id.user_drawer_layout)\n        val menuRight = findViewById<View>(R.id.menuRight) as ImageButton\n        menuRight.setOnClickListener {\n            if (userLayout.isDrawerOpen(GravityCompat.END)) {\n                userLayout.closeDrawer(GravityCompat.END)\n            } else {\n                userLayout.openDrawer(GravityCompat.END)\n            }\n        }\n        //creates a submenu named user\n        val subMenu: SubMenu\n        val navigationView: NavigationView = findViewById(R.id.nav_view)\n        val menu = navigationView.menu\n        subMenu = menu.addSubMenu(getString(R.string.SUB_MENU_TITLE))\n\n        //populates the submenu with the usernames of everyone on the list (stored in mUserList\n        //Menu.FIRST + i gives each a unique ID, used later in the program.\n        for ((i, up) in currentChecklist.users.withIndex()) {\n            subMenu.add(0, Menu.FIRST + i, Menu.FIRST, up.Username)\n        }\n\n        //gets called whenever any item is selected in the nav menu\n        navigationView.setNavigationItemSelectedListener { menuItem ->\n            //handles all items in nav drawer that are created at compile time\n            if (!onOptionsItemSelected(menuItem))\n            {\n                //handles all items in nav drawer that are created at run time\n                val id = menuItem.itemId - Menu.FIRST\n                if (id < currentChecklist.users.size && id >= 0) {\n                    val up = currentChecklist.users[id]\n                    val tempIntent = Intent(this, UserLogin::class.java).apply {\n                        putExtra(\"id\", up.UserID)\n                        putExtra(\"uname\", up.Username)\n                        putExtra(\"fname\", up.FName)\n                        putExtra(\"lname\", up.LName)\n                    }\n                    startActivity(tempIntent)\n                }\n            }\n            // close drawer when item is tapped\n            userLayout.closeDrawers()\n            // Add code here to update the UI based on the item selected\n            // For example, swap UI fragments here\n\n            true\n        }\n\n        val addButton = findViewById<Button>(R.id.AddTaskButton)\n        val checkoffButton = findViewById<Button>(R.id.CheckoffButton)\n        val historyButton = findViewById<Button>(R.id.HistoryButton)\n\n        //Creates the click listener for the add button\n        val addListener = View.OnClickListener {\n\n                //If there is not a popup already [resent\n            if(!popupPresent) {\n\n                //Get the view containing all the tasks\n                val mainView = findViewById<ScrollView>(R.id.TaskScrollView)\n\n                val popupWindow = PopupWindow(this)\n                //Create a view that is of the popup_layout in resources\n                val popupView = layoutInflater.inflate(R.layout.popup_layout, null)\n                //Sets the content of the popup to the popup_layout\n                popupWindow.contentView = popupView\n                //Retrieves the acceptButton from the popup\n                val acceptButton = popupView.PopupMainView.AcceptButton\n\n                //Creates and adds the on click action to the add button\n                acceptButton.setOnClickListener{\n\n                        val popup_edittext = popupView.PopupMainView.PopupEditText\n\n                        //Retrieves the name of the task if the name is long enough\n                        if (popup_edittext.text.toString().length >= 1) {\n                            createNewTask(popup_edittext.text.toString(), false, 0/*needs to be something later*/)\n                            //currentChecklist.createTask(popup_edittext.text.toString(),\n                            //   \"none\", User(intent.getIntExtra(\"UserID\", 0)))\n                        }\n\n                    //Set dismiss listener\n                    popupWindow.setOnDismissListener {\n                        popupPresent = false\n                    }\n                    //Dismisses the popup\n                    popupWindow.dismiss()\n                }\n                //Set cancel button to dismiss the popup\n                val cancelButton = popupView.PopupMainView.CancelButton\n\n                cancelButton.setOnClickListener(View.OnClickListener {\n\n                    popupWindow.dismiss()\n\n                })\n                //Have the popup clean up items when dismissed\n                popupWindow.setOnDismissListener(PopupWindow.OnDismissListener {\n                    val popupEdittext = popupView.PopupMainView.PopupEditText\n\n                    popupEdittext.text.clear()\n\n                    popupPresent = false\n                })\n\n                popupWindow.isFocusable = true\n\n                popupWindow.showAtLocation(mainView, Gravity.CENTER, 0, 0)\n\n                popupPresent = true\n\n            }\n        }\n\n        addButton.setOnClickListener(addListener)\n        //Create the click listener for the checkoff button\n        val checkoffListener = View.OnClickListener {\n\n            var taskCount = TaskLayout.childCount - 1\n            //Checks all current gui elements to see if they are checked\n            while (taskCount >= 0)\n            {\n                val currentChild = TaskLayout.getChildAt(taskCount)\n\n                if(currentChild is TaskBox)\n                {\n                    val taskSwitch = currentChild.getChildAt(1)\n\n                    if(taskSwitch is Switch)\n                    {\n                        if(taskSwitch.isChecked)\n                        {\n                            if(!currentChild.checkCompletion()) {\n                                if (currentChild.checkReccurring()) {\n                                    createNewTask(currentChild.getTaskText(), true, 0/*needs to be something later*/)\n                                    //currentChecklist.createTask(currentChild.getTaskText(), \"enable Later\", User(1))\n                                }\n\n                                currentChild.completeTask()\n\n                                //TaskLayout.removeView(TaskLayout.getChildAt(taskCount))\n\n                                currentChecklist.completeTask(taskCount, User(1))\n                            }\n                        }\n                    }\n                }\n\n                taskCount--\n            }\n        }\n\n        checkoffButton.setOnClickListener(checkoffListener)\n\n        //Set history button's click listener\n\n        val historyListener = View.OnClickListener {\n            //Toast.makeText(this, \"General Kenobi!\", Toast.LENGTH_SHORT).show()\n\n            if(!popupPresent) {\n\n                val mainViewHistory = findViewById<ScrollView>(R.id.TaskScrollView)\n\n                val popupWindowHistory = PopupWindow(this)\n\n                val popupViewHistory = layoutInflater.inflate(R.layout.history_popup, null)\n\n                popupWindowHistory.contentView = popupViewHistory\n\n\n                val cancelListener = View.OnClickListener {\n                    popupWindowHistory.dismiss()\n                }\n\n                val dismissListener = PopupWindow.OnDismissListener {\n                    popupPresent = false\n                }\n\n                popupWindowHistory.setOnDismissListener(dismissListener)\n\n                popupViewHistory.HistoryCloseButton.setOnClickListener(cancelListener)\n\n                popupPresent = true\n\n                popupWindowHistory.isFocusable = true\n\n                val historyIterator = currentChecklist.changes.iterator()\n\n                val historyLayout = popupViewHistory.HistoryLinearLayout\n\n                //Check to see if not changes have happened\n                //Displays a message for each change that has occurred\n                if(currentChecklist.changes.isEmpty()) {\n                    val checklistChangeTextView = TextView(this)\n\n                    var toAddString = \"No Changes in this checklist!\"\n\n                    checklistChangeTextView.text = toAddString\n\n                    checklistChangeTextView.setTextColor(Color.WHITE)\n\n                    checklistChangeTextView.textSize = 30f\n                    checklistChangeTextView.layoutParams = LinearLayout.LayoutParams(\n                        LinearLayout.LayoutParams.WRAP_CONTENT,\n                        ViewGroup.LayoutParams.WRAP_CONTENT\n                    )\n\n                    historyLayout.addView(checklistChangeTextView)\n                }\n                else {\n                    historyIterator.forEach {\n\n                        val checklistChangeTextView = TextView(this)\n\n                        var toAddString = \"Default\"\n\n                        when(it.changeType) {\n\n                            kAction.CREATE_TASK -> toAddString = \"--- Task Added: \" + it.taskName +\n                                    \"\\n    Added By: Current User\\n\"\n                            kAction.DELETE_TASK -> toAddString = \"--- Task Deleted: \" + it.taskName +\n                                    \"\\n    Deleted By: Current User\\n\"\n                            kAction.COMPLETE_TASK -> toAddString = \"--- Task Completed: \" + it.taskName +\n                                    \"\\n    Completed By: Current User\\n\"\n                        }\n\n                        checklistChangeTextView.text = toAddString\n\n                        checklistChangeTextView.setTextColor(Color.WHITE)\n\n                        checklistChangeTextView.textSize = 20f\n                        checklistChangeTextView.layoutParams = LinearLayout.LayoutParams(\n                            LinearLayout.LayoutParams.WRAP_CONTENT,\n                            ViewGroup.LayoutParams.WRAP_CONTENT\n                        )\n\n                        historyLayout.addView(checklistChangeTextView)\n                    }\n                }\n\n                popupWindowHistory.showAtLocation(mainViewHistory, Gravity.CENTER, 0, 0)\n            }\n        }\n\n        historyButton.setOnClickListener(historyListener)\n    }\n\n    fun createListFile(list: Checklist) {\n        //convert list to a JSON string\n        val gson = Gson()\n        val userJson = gson.toJson(list)\n\n        //context will give us access to our local files directory\n        var context = applicationContext\n\n        val filename = list.i_name\n        val directory = context.filesDir\n\n        //write the file to local directory\n        //the filename will be the name of the list\n        val file = File(directory, filename)\n        FileOutputStream(file).use {\n            it.write(userJson.toByteArray())\n        }\n    }\n\n    fun listFileExists() : Boolean {\n        return File(applicationContext.filesDir, currentChecklist.i_name).exists()\n    }\n\n    //we don't have to check if the file exists in this function\n    //because we call listFileExists() before calling this\n    //however, we might need some other error checking in here\n    fun getListFromFile() : Checklist {\n        //context will give us access to our local files directory\n        var context = applicationContext\n\n        val filename = currentChecklist.i_name\n        val directory = context.filesDir\n\n        //read from the file and store it as a string\n        val file = File(directory, filename)\n        val fileData = FileInputStream(file).bufferedReader().use { it.readText() }\n\n        //create a Checklist object based on the JSON from the file\n        val gson = Gson()\n        return gson.fromJson(fileData, Checklist::class.java)\n    }\n\n    fun deleteListDataFile(){\n        //context will give us access to our local files directory\n        var context = applicationContext\n\n        val filename = currentChecklist.i_name\n        val directory = context.filesDir\n\n        //delete the file\n        File(directory, filename).delete()\n    }\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\n        //handles all nav drawer activity that was added at run time.\n        return when (item.itemId) {\n            android.R.id.home -> {\n                userLayout.openDrawer(GravityCompat.START)\n                true\n            }\n            R.id.dAddUser -> {\n                //addusercodehere\n\n                true\n            }\n            else -> super.onOptionsItemSelected(item)\n        }\n    }\n    private fun turnOffButtons() {\n        val turnOff: Button = findViewById(R.id.AddTaskButton)\n        turnOff.isClickable = false\n        val turnOff2 : Button = findViewById(R.id.CheckoffButton)\n        turnOff2.isClickable = false\n        val turnOff3 : Button = findViewById(R.id.EditTaskButton)\n        turnOff3.isClickable = false\n    }\n    private fun turnOnButtons() {\n\n        var turnOn : Button = findViewById(R.id.AddTaskButton)\n        turnOn.isClickable = true\n        turnOn = findViewById(R.id.CheckoffButton)\n        turnOn.isClickable = true\n        turnOn = findViewById(R.id.EditTaskButton)\n        turnOn.isClickable = true\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/doug/checklistpresentlayer/BaseChecklist.kt	(date 1555293116000)
+++ app/src/main/java/com/example/doug/checklistpresentlayer/BaseChecklist.kt	(date 1555293453108)
@@ -568,7 +568,6 @@
             //if there's only one user on the list, don't do anything
 
             if (!currentChecklist.users.isEmpty()) {
-//                //THIS COMMENT BLOCK IS FOR MATT TODO
 //                //globalscope.launch starts a new thread, where all this will happen.
 //                //we DO NOT want the user to be able to change anything in their list while this thread is active.
 //                //we need code that will check if this thread is active in the thread pool.
@@ -582,7 +581,7 @@
 //                    if (list != currentChecklist){
                     /*have a popup or something telling the user that the list has been updated*/
                     //currentChecklist = list
-//                  turnOnButtons()
+                    turnOnButtons()
 
                 }
             }
Index: app/src/main/res/layout/activity_login.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n                                             xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n                                             xmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\"\n                                             android:layout_height=\"match_parent\">\n\n    <EditText\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:inputType=\"textPersonName\"\n            android:ems=\"10\"\n            android:id=\"@+id/lUN\"\n            android:layout_marginStart=\"8dp\"\n            app:layout_constraintStart_toStartOf=\"parent\" android:layout_marginEnd=\"8dp\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            android:layout_marginTop=\"16dp\" app:layout_constraintTop_toBottomOf=\"@+id/ErrorText\"\n            android:hint=\"@string/USERNAME_TEXT\"/>\n    <EditText\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:ems=\"10\"\n            android:id=\"@+id/lPW\" android:layout_marginTop=\"32dp\"\n            app:layout_constraintTop_toBottomOf=\"@+id/lUN\" android:layout_marginStart=\"8dp\"\n            app:layout_constraintStart_toStartOf=\"parent\" android:layout_marginEnd=\"8dp\"\n            app:layout_constraintEnd_toEndOf=\"parent\" android:hint=\"@string/PASSWORD_TEXT\" android:inputType=\"textPassword\"/>\n    <Button\n            android:text=\"@string/LOGIN_TEXT\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:id=\"@+id/login_button\" android:layout_marginTop=\"32dp\"\n            app:layout_constraintTop_toBottomOf=\"@+id/lPW\" app:layout_constraintEnd_toEndOf=\"parent\"\n            android:layout_marginEnd=\"8dp\" android:layout_marginRight=\"8dp\"\n            app:layout_constraintStart_toStartOf=\"parent\" android:layout_marginLeft=\"8dp\"\n            android:layout_marginStart=\"8dp\"/>\n    <TextView\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:id=\"@+id/ErrorText\" app:layout_constraintEnd_toEndOf=\"parent\" android:layout_marginEnd=\"8dp\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            android:layout_marginStart=\"8dp\" android:layout_marginBottom=\"8dp\"\n            app:layout_constraintBottom_toTopOf=\"@+id/lUN\"\n            app:layout_constraintTop_toBottomOf=\"@+id/imageView\" android:layout_marginTop=\"32dp\"/>\n    <ImageView\n            android:layout_width=\"325dp\"\n            android:layout_height=\"142dp\" app:srcCompat=\"@drawable/logo\"\n            android:id=\"@+id/imageView\" android:layout_marginTop=\"32dp\"\n            app:layout_constraintTop_toTopOf=\"parent\" app:layout_constraintEnd_toEndOf=\"parent\"\n            android:layout_marginEnd=\"8dp\" app:layout_constraintStart_toStartOf=\"parent\"\n            android:layout_marginStart=\"8dp\"/>\n    <TextView\n            android:text=\"@string/REGISTER_TEXT\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:id=\"@+id/register_text_button\"\n            app:layout_constraintEnd_toEndOf=\"parent\" android:layout_marginEnd=\"8dp\"\n            app:layout_constraintStart_toStartOf=\"parent\" android:layout_marginStart=\"8dp\"\n            app:layout_constraintTop_toBottomOf=\"@+id/forgot_button\" android:layout_marginTop=\"24dp\"/>\n    <TextView\n            android:text=\"@string/FORGOT_TEXT\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:id=\"@+id/forgot_button\"\n            app:layout_constraintStart_toStartOf=\"parent\" android:layout_marginStart=\"8dp\"\n            android:layout_marginTop=\"24dp\" app:layout_constraintTop_toBottomOf=\"@+id/login_button\"\n            android:layout_marginEnd=\"8dp\"\n            app:layout_constraintEnd_toEndOf=\"parent\"/>\n</android.support.constraint.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_login.xml	(date 1555293116000)
+++ app/src/main/res/layout/activity_login.xml	(date 1555293121061)
@@ -13,7 +13,7 @@
             android:layout_marginStart="8dp"
             app:layout_constraintStart_toStartOf="parent" android:layout_marginEnd="8dp"
             app:layout_constraintEnd_toEndOf="parent"
-            android:layout_marginTop="16dp" app:layout_constraintTop_toBottomOf="@+id/ErrorText"
+            android:layout_marginTop="16dp" app:layout_constraintTop_toBottomOf="@+id/WrongText"
             android:hint="@string/USERNAME_TEXT"/>
     <EditText
             android:layout_width="wrap_content"
@@ -35,26 +35,37 @@
     <TextView
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
+            android:id="@+id/WrongText" app:layout_constraintEnd_toEndOf="parent" android:layout_marginEnd="8dp"
+            app:layout_constraintStart_toStartOf="parent"
+            android:layout_marginStart="8dp" android:layout_marginBottom="8dp"
+            app:layout_constraintBottom_toTopOf="@+id/lUN"
+            app:layout_constraintTop_toBottomOf="@+id/imageView" android:layout_marginTop="32dp"
+            android:text="@string/FORGOT_TEXT" android:visibility="invisible"/>
+    <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
             android:id="@+id/ErrorText" app:layout_constraintEnd_toEndOf="parent" android:layout_marginEnd="8dp"
             app:layout_constraintStart_toStartOf="parent"
             android:layout_marginStart="8dp" android:layout_marginBottom="8dp"
             app:layout_constraintBottom_toTopOf="@+id/lUN"
-            app:layout_constraintTop_toBottomOf="@+id/imageView" android:layout_marginTop="32dp"/>
+            app:layout_constraintTop_toBottomOf="@+id/imageView" android:layout_marginTop="32dp"
+            android:text="@string/SOMETHING_TEXT" android:visibility="invisible"/>
     <ImageView
             android:layout_width="325dp"
             android:layout_height="142dp" app:srcCompat="@drawable/logo"
             android:id="@+id/imageView" android:layout_marginTop="32dp"
             app:layout_constraintTop_toTopOf="parent" app:layout_constraintEnd_toEndOf="parent"
             android:layout_marginEnd="8dp" app:layout_constraintStart_toStartOf="parent"
-            android:layout_marginStart="8dp"/>
+            android:layout_marginStart="8dp" android:contentDescription="@string/LOGO_TEXT"/>
     <TextView
             android:text="@string/REGISTER_TEXT"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
             android:id="@+id/register_text_button"
-            app:layout_constraintEnd_toEndOf="parent" android:layout_marginEnd="8dp"
-            app:layout_constraintStart_toStartOf="parent" android:layout_marginStart="8dp"
-            app:layout_constraintTop_toBottomOf="@+id/forgot_button" android:layout_marginTop="24dp"/>
+            android:layout_marginTop="24dp"
+            app:layout_constraintTop_toBottomOf="@+id/forgot_button" app:layout_constraintEnd_toEndOf="parent"
+            android:layout_marginEnd="8dp" app:layout_constraintStart_toStartOf="parent"
+            android:layout_marginStart="8dp"/>
     <TextView
             android:text="@string/FORGOT_TEXT"
             android:layout_width="wrap_content"
@@ -64,4 +75,13 @@
             android:layout_marginTop="24dp" app:layout_constraintTop_toBottomOf="@+id/login_button"
             android:layout_marginEnd="8dp"
             app:layout_constraintEnd_toEndOf="parent"/>
+    <ProgressBar
+            android:id="@+id/progress_bar"
+            style="?android:attr/progressBarStyleLarge"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_centerHorizontal="true"
+            app:layout_constraintTop_toBottomOf="@+id/register_text_button" app:layout_constraintEnd_toEndOf="parent"
+            android:layout_marginEnd="8dp" app:layout_constraintStart_toStartOf="parent"
+            android:layout_marginStart="8dp" android:layout_marginTop="24dp" android:visibility="invisible"/>
 </android.support.constraint.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/res/layout/activity_base_checklist.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".BaseChecklist\" android:id=\"@+id/BaseLayout\">\n    <android.support.v4.widget.DrawerLayout\n            android:id=\"@+id/user_drawer_layout\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:fitsSystemWindows=\"true\">\n        <FrameLayout\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\"\n                app:layout_constraintTop_toTopOf=\"parent\"\n                app:layout_constraintBottom_toBottomOf=\"parent\">\n            <android.support.constraint.ConstraintLayout\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"match_parent\"\n                    tools:context=\".BaseListofLists\" android:id=\"@+id/BaseLayout2\">\n                <android.support.v7.widget.Toolbar\n                        android:id=\"@+id/toolbar\"\n                        android:layout_width=\"match_parent\"\n                        android:layout_height=\"wrap_content\"\n                        android:background=\"?attr/colorPrimary\"\n                        android:theme=\"@style/ThemeOverlay.AppCompat.ActionBar\"\n                        app:layout_constraintTop_toTopOf=\"parent\" app:layout_constraintStart_toStartOf=\"parent\"\n                        app:layout_constraintEnd_toEndOf=\"parent\"\n                        app:layout_constraintHorizontal_bias=\"0.0\">\n                    <RelativeLayout\n                            android:layout_width=\"match_parent\"\n                            android:layout_height=\"wrap_content\" app:layout_constraintTop_toTopOf=\"parent\"\n                            app:layout_constraintStart_toStartOf=\"parent\" app:layout_constraintEnd_toEndOf=\"parent\">\n                        <ImageButton\n                                android:id=\"@+id/menuRight\"\n                                android:layout_width=\"wrap_content\"\n                                android:layout_height=\"wrap_content\"\n                                android:layout_alignParentRight=\"true\"\n                                android:layout_alignParentEnd=\"true\"\n                                android:backgroundTint=\"@android:color/transparent\"\n                                android:src=\"@drawable/ic_group_black_24dp\"\n                                android:tint=\"@color/colorDefaultButton\" android:layout_marginEnd=\"-1dp\"/>\n                    </RelativeLayout>\n                </android.support.v7.widget.Toolbar>\n                <ScrollView\n                        android:layout_width=\"368dp\"\n                        android:layout_height=\"417dp\"\n                        app:layout_constraintStart_toStartOf=\"parent\"\n                        android:layout_marginStart=\"8dp\" app:layout_constraintEnd_toEndOf=\"parent\"\n                        android:layout_marginEnd=\"8dp\"\n                        android:id=\"@+id/TaskScrollView\"\n                        app:layout_constraintHorizontal_bias=\"1.0\" android:layout_marginBottom=\"2dp\"\n                        app:layout_constraintBottom_toTopOf=\"@+id/linearLayout\"\n                        app:layout_constraintTop_toBottomOf=\"@+id/toolbar\">\n                    <LinearLayout\n                            android:orientation=\"vertical\"\n                            android:layout_width=\"match_parent\"\n                            android:layout_height=\"wrap_content\" android:id=\"@+id/TaskLayout\"\n                            android:gravity=\"center_horizontal\">\n                    </LinearLayout>\n                </ScrollView>\n                <LinearLayout\n                        android:orientation=\"horizontal\"\n                        android:layout_height=\"83dp\" android:layout_marginBottom=\"8dp\"\n                        app:layout_constraintBottom_toBottomOf=\"parent\" android:layout_width=\"375dp\"\n                        android:layout_marginTop=\"8dp\"\n                        app:layout_constraintTop_toBottomOf=\"@+id/TaskScrollView\"\n                        app:layout_constraintStart_toStartOf=\"parent\"\n                        android:layout_marginStart=\"8dp\" app:layout_constraintEnd_toEndOf=\"parent\"\n                        android:layout_marginEnd=\"8dp\"\n                        android:id=\"@+id/linearLayout\">\n                    <Button\n                            android:text=\"@string/ADD_BUTTON_STRING\"\n                            android:layout_width=\"wrap_content\"\n                            android:layout_height=\"wrap_content\"\n                            android:id=\"@+id/AddTaskButton\"\n                            app:layout_constraintBottom_toBottomOf=\"parent\" android:layout_marginBottom=\"18dp\"\n                            app:layout_constraintStart_toStartOf=\"parent\"\n                            android:layout_marginStart=\"8dp\"\n                            app:layout_constraintEnd_toStartOf=\"@+id/CheckoffButton\"\n                            android:textSize=\"13sp\"\n                            android:layout_marginTop=\"8dp\" app:layout_constraintTop_toBottomOf=\"@+id/TaskScrollView\"/>\n                    <Button\n                            android:text=\"@string/CHECKOFF_BUTTON_STRING\"\n                            android:layout_width=\"wrap_content\"\n                            android:layout_height=\"wrap_content\"\n                            android:id=\"@+id/CheckoffButton\"\n                            app:layout_constraintStart_toEndOf=\"@+id/AddTaskButton\"\n                            app:layout_constraintEnd_toStartOf=\"@+id/HistoryButton\"\n                            app:layout_constraintBottom_toBottomOf=\"parent\" android:layout_marginBottom=\"18dp\"\n                            android:layout_marginTop=\"8dp\" app:layout_constraintTop_toBottomOf=\"@+id/TaskScrollView\"\n                            android:textSize=\"13sp\"/>\n                    <Button\n                            android:text=\"@string/HISTORY_BUTTON_STRING\"\n                            android:layout_width=\"wrap_content\"\n                            android:layout_height=\"wrap_content\"\n                            android:id=\"@+id/HistoryButton\"\n                            app:layout_constraintStart_toEndOf=\"@+id/CheckoffButton\"\n                            android:layout_marginBottom=\"18dp\"\n                            app:layout_constraintBottom_toBottomOf=\"parent\"\n                            app:layout_constraintEnd_toStartOf=\"@+id/EditTaskButton\" android:layout_marginTop=\"8dp\"\n                            app:layout_constraintTop_toBottomOf=\"@+id/TaskScrollView\" android:textSize=\"13sp\"/>\n                    <Button\n                            android:layout_width=\"wrap_content\"\n                            android:layout_height=\"wrap_content\"\n                            android:id=\"@+id/EditTaskButton\" app:layout_constraintEnd_toEndOf=\"parent\"\n                            android:layout_marginEnd=\"8dp\"\n                            android:layout_marginBottom=\"18dp\" app:layout_constraintBottom_toBottomOf=\"parent\"\n                            app:layout_constraintStart_toEndOf=\"@+id/HistoryButton\"\n                            android:text=\"@string/EDIT_BUTTON_STRING\" android:layout_marginTop=\"8dp\"\n                            app:layout_constraintTop_toBottomOf=\"@+id/TaskScrollView\"/>\n                </LinearLayout>\n            </android.support.constraint.ConstraintLayout>\n        </FrameLayout>\n        <android.support.design.widget.NavigationView\n            android:id=\"@+id/nav_view\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"match_parent\"\n            android:layout_gravity=\"right\"\n            android:fitsSystemWindows=\"true\"\n            app:menu=\"@menu/user_drawer_view\" />\n    </android.support.v4.widget.DrawerLayout>\n</android.support.constraint.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_base_checklist.xml	(date 1555293116000)
+++ app/src/main/res/layout/activity_base_checklist.xml	(date 1555293121056)
@@ -33,15 +33,21 @@
                             android:layout_width="match_parent"
                             android:layout_height="wrap_content" app:layout_constraintTop_toTopOf="parent"
                             app:layout_constraintStart_toStartOf="parent" app:layout_constraintEnd_toEndOf="parent">
+                        <ProgressBar
+                                android:id="@+id/progressBar1"
+                                style="?android:attr/progressBarStyleLarge"
+                                android:layout_width="35dp"
+                                android:layout_height="43dp"
+                                android:layout_toStartOf="@+id/menuRight" android:layout_marginEnd="13dp"/>
                         <ImageButton
                                 android:id="@+id/menuRight"
                                 android:layout_width="wrap_content"
                                 android:layout_height="wrap_content"
-                                android:layout_alignParentRight="true"
                                 android:layout_alignParentEnd="true"
                                 android:backgroundTint="@android:color/transparent"
                                 android:src="@drawable/ic_group_black_24dp"
-                                android:tint="@color/colorDefaultButton" android:layout_marginEnd="-1dp"/>
+                                android:tint="@color/colorDefaultButton" android:layout_marginEnd="-2dp"
+                                android:layout_marginTop="0dp" android:layout_alignParentTop="true"/>
                     </RelativeLayout>
                 </android.support.v7.widget.Toolbar>
                 <ScrollView
Index: app/src/main/java/com/example/doug/checklistpresentlayer/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.doug.checklistpresentlayer\n\nimport android.content.Context\nimport android.os.Bundle\nimport android.support.v7.app.AppCompatActivity\nimport android.content.Intent\nimport com.google.gson.Gson\nimport com.google.gson.reflect.TypeToken\nimport kotlinx.android.synthetic.main.activity_login.*\nimport java.io.File\nimport java.io.FileInputStream\nimport java.io.FileOutputStream\nimport net.danlew.android.joda.JodaTimeAndroid\n\n//This is actually the user login page functionality\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n\n        super.onCreate(savedInstanceState)\n        JodaTimeAndroid.init(this)\n        setContentView(R.layout.activity_login)\n\n        var user: UserPage\n\n        //if the USERDATA file exists already, the user doesn't\n        //have to go through the login process\n        if(userFileExists()){\n            user = getUserFromFile()\n\n            //Go to the list of lists page\n            val tempIntent = Intent(this, BaseListofLists::class.java).apply {\n                putExtra(\"uname\", user.ViewUserName())\n                putExtra(\"fname\", user.ViewFName())\n                putExtra(\"lname\", user.ViewLName())\n                putExtra(\"UserID\",user.ViewID())\n            }\n\n            startActivity(tempIntent)\n        }\n\n        login_button.setOnClickListener {\n            //establish a database connection\n            val db = Database()\n            //try to login\n            user = db.LogIn(lUN.text.toString(), lPW.text.toString())\n\n            //if there was an error, display it\n            if (user.HasError()) {\n                if (user.ViewError() == \"404\")\n                    ErrorText.text = \"Incorrect username or password\"\n                else\n                    ErrorText.text = \"Something went wrong\"\n            }\n\n            //otherwise, log the user in and transfer to the list of lists page\n            else {\n                //save a local file with the user's data\n                //so that they won't have to login next time\n                saveLoginLocally(user)\n\n                //Go to the list of lists page\n                val tempIntent = Intent(this, BaseListofLists::class.java).apply {\n                        putExtra(\"uname\", user.ViewUserName())\n                        putExtra(\"fname\", user.ViewFName())\n                        putExtra(\"lname\", user.ViewLName())\n                        putExtra(\"UserID\",user.ViewID())\n                }\n                startActivity(tempIntent)\n            }\n        }\n\n        register_text_button.setOnClickListener {\n            val tempIntent = Intent(this, Registration::class.java)\n            startActivity(tempIntent)\n        }\n    }\n\n    fun saveLoginLocally(user: UserPage){\n        //convert user to a JSON string\n        val gson = Gson()\n        val userJson = gson.toJson(user)\n\n        //context will give us access to our local files directory\n        var context = applicationContext\n\n        val filename = \"USERDATA\"\n        val directory = context.filesDir\n\n        //write the file USERDATA to local directory\n        val file = File(directory, filename)\n        FileOutputStream(file).use {\n            it.write(userJson.toByteArray())\n        }\n    }\n\n    fun userFileExists() : Boolean {\n        return File(applicationContext.filesDir, \"USERDATA\").exists()\n    }\n\n    //we don't have to check if the file exists in this function\n    //because we call userFileExists() before calling this\n    //however, we might need some other error checking in here\n    fun getUserFromFile() : UserPage {\n        //context will give us access to our local files directory\n        var context = applicationContext\n\n        val filename = \"USERDATA\"\n        val directory = context.filesDir\n\n        //read from USERDATA and store it as a string\n        val file = File(directory, filename)\n        val fileData = FileInputStream(file).bufferedReader().use { it.readText() }\n\n        //create a UserPage object based on the JSON from the file\n        val gson = Gson()\n        return gson.fromJson(fileData, UserPage::class.java)\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/doug/checklistpresentlayer/MainActivity.kt	(date 1555293116000)
+++ app/src/main/java/com/example/doug/checklistpresentlayer/MainActivity.kt	(date 1555293121273)
@@ -1,12 +1,15 @@
 package com.example.doug.checklistpresentlayer
 
-import android.content.Context
 import android.os.Bundle
 import android.support.v7.app.AppCompatActivity
 import android.content.Intent
+import android.view.View
+import android.widget.ProgressBar
+import android.widget.TextView
 import com.google.gson.Gson
-import com.google.gson.reflect.TypeToken
 import kotlinx.android.synthetic.main.activity_login.*
+import kotlinx.coroutines.GlobalScope
+import kotlinx.coroutines.launch
 import java.io.File
 import java.io.FileInputStream
 import java.io.FileOutputStream
@@ -22,6 +25,11 @@
 
         var user: UserPage
 
+        val spinner : ProgressBar = findViewById(R.id.progress_bar)
+        val error1 : TextView = findViewById(R.id.WrongText)
+        val error2 : TextView = findViewById(R.id.ErrorText)
+
+
         //if the USERDATA file exists already, the user doesn't
         //have to go through the login process
         if(userFileExists()){
@@ -41,32 +49,50 @@
         login_button.setOnClickListener {
             //establish a database connection
             val db = Database()
+            val ctext = this
+
+            //sets the loading spinner to visible and to not fill as it goes, just to spin
+            spinner.visibility = View.VISIBLE
+            spinner.isIndeterminate = true
+            //turns off any errors that were set
+            error1.visibility = View.INVISIBLE
+            error2.visibility = View.INVISIBLE
+
             //try to login
-            user = db.LogIn(lUN.text.toString(), lPW.text.toString())
+            GlobalScope.launch {
+                user = db.LogIn(lUN.text.toString(), lPW.text.toString())
 
-            //if there was an error, display it
-            if (user.HasError()) {
-                if (user.ViewError() == "404")
-                    ErrorText.text = "Incorrect username or password"
-                else
-                    ErrorText.text = "Something went wrong"
-            }
+                //runs this code on the gui thread so we can set errors, this code is fast so shouldn't effect runtime
+                this@MainActivity.runOnUiThread{
+                    //if there was an error, display it
+                    if (user.HasError()) {
+                        if (user.ViewError() == "404")
+                            error1.visibility = View.VISIBLE
+                        else
+                            error2.visibility = View.VISIBLE
+                    }
 
-            //otherwise, log the user in and transfer to the list of lists page
-            else {
-                //save a local file with the user's data
-                //so that they won't have to login next time
-                saveLoginLocally(user)
+                    //otherwise, log the user in and transfer to the list of lists page
+                    else {
+                        //save a local file with the user's data
+                        //so that they won't have to login next time
+                        saveLoginLocally(user)
 
-                //Go to the list of lists page
-                val tempIntent = Intent(this, BaseListofLists::class.java).apply {
-                        putExtra("uname", user.ViewUserName())
-                        putExtra("fname", user.ViewFName())
-                        putExtra("lname", user.ViewLName())
-                        putExtra("UserID",user.ViewID())
-                }
-                startActivity(tempIntent)
+                        //Go to the list of lists page
+                        val tempIntent = Intent(ctext, BaseListofLists::class.java).apply {
+                            putExtra("uname", user.ViewUserName())
+                            putExtra("fname", user.ViewFName())
+                            putExtra("lname", user.ViewLName())
+                            putExtra("UserID",user.ViewID())
+                        }
+                        startActivity(tempIntent)
+                    }
+
+                    //turns of loading spinner
+                    spinner.visibility = View.INVISIBLE
+                }
             }
+
         }
 
         register_text_button.setOnClickListener {
